"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[506],{2472:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>l,contentTitle:()=>c,default:()=>a,frontMatter:()=>s,metadata:()=>t,toc:()=>d});const t=JSON.parse('{"id":"component/middleware/logging","title":"Logging","description":"Logging middleware is used to print the details of requests received or initiated by the service.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/component/middleware/04-logging.md","sourceDirName":"component/middleware","slug":"/component/middleware/logging","permalink":"/en/docs/component/middleware/logging","draft":false,"unlisted":false,"editUrl":"https://github.com/go-kratos/go-kratos.dev/edit/main/i18n/en/docusaurus-plugin-content-docs/current/component/middleware/04-logging.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"id":"logging","title":"Logging","keywords":["Go","Kratos","Toolkit","Framework","Microservices","Protobuf","gRPC","HTTP"]},"sidebar":"docs","previous":{"title":"Circuit Breaker","permalink":"/en/docs/component/middleware/circuitbreaker"},"next":{"title":"Metrics","permalink":"/en/docs/component/middleware/metrics"}}');var i=n(4848),o=n(8453);const s={id:"logging",title:"Logging",keywords:["Go","Kratos","Toolkit","Framework","Microservices","Protobuf","gRPC","HTTP"]},c=void 0,l={},d=[{value:"Usage",id:"usage",level:3},{value:"gRPC server",id:"grpc-server",level:4},{value:"gRPC client",id:"grpc-client",level:4},{value:"HTTP client",id:"http-client",level:4},{value:"Use in the project",id:"use-in-the-project",level:3},{value:"grpc-server internal/server/grpc.go",id:"grpc-server-internalservergrpcgo",level:4}];function g(e){const r={code:"code",h3:"h3",h4:"h4",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(r.p,{children:"Logging middleware is used to print the details of requests received or initiated by the service."}),"\n",(0,i.jsx)(r.h3,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(r.h4,{id:"grpc-server",children:"gRPC server"}),"\n",(0,i.jsxs)(r.p,{children:["By passing ",(0,i.jsx)(r.code,{children:"logging.Server()"})," in ",(0,i.jsx)(r.code,{children:"grpc.ServerOption"}),", Kratos will print detailed request information every time a gRPC request is received."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-go",children:"logger := log.DefaultLogger\nvar opts = []grpc.ServerOption{\n\tgrpc.Middleware(\n\t\tlogging.Server(logger),\n\t),\n}\nsrv := grpc.NewServer(opts...)\n"})}),"\n",(0,i.jsx)(r.h4,{id:"grpc-client",children:"gRPC client"}),"\n",(0,i.jsxs)(r.p,{children:["By passing ",(0,i.jsx)(r.code,{children:"logging.Client()"})," in ",(0,i.jsx)(r.code,{children:"grpc.WithMiddleware"}),", Kratos will print detailed request information every time a grpc request is initiated."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-go",children:"logger := log.DefaultLogger\nvar opts = []http.ServerOption{\n\thttp.Middleware(\n\t\tlogging.Server(logger),\n\t),\n}\nsrv := http.NewServer(opts...)\n"})}),"\n",(0,i.jsx)(r.h4,{id:"http-client",children:"HTTP client"}),"\n",(0,i.jsxs)(r.p,{children:["By passing ",(0,i.jsx)(r.code,{children:"logging.Client()"})," in ",(0,i.jsx)(r.code,{children:"http.WithMiddleware"}),", Kratos will print detailed request information every time an Http request is initiated."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-go",children:'logger := log.DefaultLogger\nconn, err := http.NewClient(\n\tcontext.Background(),\n\thttp.WithMiddleware(\n\t\tlogging.Client(logger),\n\t),\n\thttp.WithEndpoint("127.0.0.1:8000"),\n)\n'})}),"\n",(0,i.jsxs)(r.p,{children:["The Logging middleware only prints ",(0,i.jsx)(r.code,{children:"trace_id"})," in the server and does not collect data."]}),"\n",(0,i.jsx)(r.h3,{id:"use-in-the-project",children:"Use in the project"}),"\n",(0,i.jsx)(r.h4,{id:"grpc-server-internalservergrpcgo",children:"grpc-server internal/server/grpc.go"}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-go",children:'exporter, err := stdouttrace.New(stdouttrace.WithWriter(ioutil.Discard))\nif err != nil {\n\tfmt.Printf("creating stdout exporter: %v", err)\n\tpanic(err)\n}\n\ntp := tracesdk.NewTracerProvider(\n\ttracesdk.WithBatcher(exporter),\n\ttracesdk.WithResource(resource.NewSchemaless(\n\t\tsemconv.ServiceNameKey.String(Name)),\n\t)\n)\n\nvar opts = []grpc.ServerOption{\n  grpc.Middleware(\n    tracing.Server(tracing.WithTracerProvider(tp)),\n  ),\n}\n\nsrv := grpc.NewServer(opts...)\n'})}),"\n",(0,i.jsxs)(r.p,{children:["Add the ",(0,i.jsx)(r.code,{children:"trace_id"})," field to the output log, cmd/project_name/main.go."]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-go",children:'logger := log.With(\n  log.NewStdLogger(os.Stdout),\n  "ts", log.DefaultTimestamp,\n  "caller", log.DefaultCaller,\n  "service.id", id,\n  "service.name", Name,\n  "service.version", Version,\n  "trace_id", log.TraceID(),\n  "span_id", log.SpanID(),\n)\n'})}),"\n",(0,i.jsxs)(r.p,{children:["Log ",(0,i.jsx)(r.code,{children:"trace_id"})]}),"\n",(0,i.jsx)(r.pre,{children:(0,i.jsx)(r.code,{className:"language-go",children:'log.WithContext(ctx).Errorf("Field created: %s", err)\n'})})]})}function a(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,i.jsx)(r,{...e,children:(0,i.jsx)(g,{...e})}):g(e)}},8453:(e,r,n)=>{n.d(r,{R:()=>s,x:()=>c});var t=n(6540);const i={},o=t.createContext(i);function s(e){const r=t.useContext(o);return t.useMemo(function(){return"function"==typeof e?e(r):{...r,...e}},[r,e])}function c(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:s(e.components),t.createElement(o.Provider,{value:r},e.children)}}}]);