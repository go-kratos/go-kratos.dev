"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1786],{7567:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>a,frontMatter:()=>c,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"component/transport/grpc","title":"gRPC","description":"Our transporter/grpc is developed upon gRPC, and implements Transporter interface. You could use it for the communication between services on gRPC protocol.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/component/transport/03-grpc.md","sourceDirName":"component/transport","slug":"/component/transport/grpc","permalink":"/en/docs/component/transport/grpc","draft":false,"unlisted":false,"editUrl":"https://github.com/go-kratos/go-kratos.dev/edit/main/i18n/en/docusaurus-plugin-content-docs/current/component/transport/03-grpc.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"grpc","title":"gRPC","keywords":["Go","Kratos","Toolkit","Framework","Microservices","Protobuf","gRPC","HTTP"]},"sidebar":"docs","previous":{"title":"HTTP","permalink":"/en/docs/component/transport/http"},"next":{"title":"\u7528\u6237\u6307\u5357","permalink":"/en/docs/category/\u7528\u6237\u6307\u5357"}}');var i=r(4848),o=r(8453);const c={id:"grpc",title:"gRPC",keywords:["Go","Kratos","Toolkit","Framework","Microservices","Protobuf","gRPC","HTTP"]},s=void 0,l={},d=[{value:"Server",id:"server",level:2},{value:"Options",id:"options",level:3},{value:"<code>Network(network string) ServerOption </code>",id:"networknetwork-string-serveroption-",level:4},{value:"<code>Address(addr string) ServerOption</code>",id:"addressaddr-string-serveroption",level:4},{value:"<code>Timeout(timeout time.Duration) ServerOption</code>",id:"timeouttimeout-timeduration-serveroption",level:4},{value:"<code>Logger(logger log.Logger) ServerOption</code>",id:"loggerlogger-loglogger-serveroption",level:4},{value:"<code>Middleware(m ...middleware.Middleware) ServerOption</code>",id:"middlewarem-middlewaremiddleware-serveroption",level:4},{value:"<code>TLSConfig(c *tls.Config) ServerOption</code>",id:"tlsconfigc-tlsconfig-serveroption",level:4},{value:"<code>UnaryInterceptor(in ...grpc.UnaryServerInterceptor) ServerOption</code>",id:"unaryinterceptorin-grpcunaryserverinterceptor-serveroption",level:4},{value:"<code>StreamInterceptor(in ...grpc.StreamServerInterceptor) ServerOption</code>",id:"streaminterceptorin-grpcstreamserverinterceptor-serveroption",level:4},{value:"<code>Options(opts ...grpc.ServerOption) ServerOption</code>",id:"optionsopts-grpcserveroption-serveroption",level:4},{value:"Implementation Details",id:"implementation-details",level:3},{value:"<code>NewServer()</code>",id:"newserver",level:4},{value:"<code>unaryServerInterceptor()</code>",id:"unaryserverinterceptor",level:4},{value:"Usage",id:"usage",level:3},{value:"Register gRPC Server",id:"register-grpc-server",level:4},{value:"Set middleware in gRPC Server",id:"set-middleware-in-grpc-server",level:4},{value:"Process Request in gRPC Middleware",id:"process-request-in-grpc-middleware",level:4},{value:"Client",id:"client",level:2},{value:"Options",id:"options-1",level:3},{value:"<code>WithEndpoint(endpoint string) ClientOption</code>",id:"withendpointendpoint-string-clientoption",level:4},{value:"<code>WithTimeout(timeout time.Duration) ClientOption</code>",id:"withtimeouttimeout-timeduration-clientoption",level:4},{value:"<code>WithMiddleware(m ...middleware.Middleware) ClientOption</code>",id:"withmiddlewarem-middlewaremiddleware-clientoption",level:4},{value:"<code>WithDiscovery(d registry.Discovery) ClientOption</code>",id:"withdiscoveryd-registrydiscovery-clientoption",level:4},{value:"<code>WithTLSConfig(c *tls.Config) ClientOption</code>",id:"withtlsconfigc-tlsconfig-clientoption",level:4},{value:"<code>WithUnaryInterceptor(in ...grpc.UnaryClientInterceptor) ClientOption</code>",id:"withunaryinterceptorin-grpcunaryclientinterceptor-clientoption",level:4},{value:"<code>WithOptions(opts ...grpc.DialOption) ClientOption</code>",id:"withoptionsopts-grpcdialoption-clientoption",level:4},{value:"<code>WithHealthCheck(healthCheck bool) ClientOption</code>",id:"withhealthcheckhealthcheck-bool-clientoption",level:4},{value:"<code>WithNodeFilter(filters ...selector.NodeFilter) ClientOption</code>",id:"withnodefilterfilters-selectornodefilter-clientoption",level:4},{value:"Implementation Details",id:"implementation-details-1",level:3},{value:"<code>dial()</code>",id:"dial",level:4},{value:"<code>unaryClientInterceptor()</code>",id:"unaryclientinterceptor",level:4},{value:"Usage",id:"usage-1",level:3},{value:"Client Connection",id:"client-connection",level:4},{value:"Middleware",id:"middleware",level:4},{value:"Service Discovery",id:"service-discovery",level:4},{value:"References",id:"references",level:2}];function p(e){const t={a:"a",code:"code",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,o.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.p,{children:["Our transporter/grpc is developed upon ",(0,i.jsx)(t.a,{href:"https://www.grpc.io/",children:"gRPC"}),", and implements ",(0,i.jsx)(t.code,{children:"Transporter"})," interface. You could use it for the communication between services on gRPC protocol."]}),"\n",(0,i.jsx)(t.h2,{id:"server",children:"Server"}),"\n",(0,i.jsx)(t.h3,{id:"options",children:"Options"}),"\n",(0,i.jsx)(t.h4,{id:"networknetwork-string-serveroption-",children:(0,i.jsx)(t.code,{children:"Network(network string) ServerOption "})}),"\n",(0,i.jsx)(t.p,{children:"To set communication protocol such as tcp."}),"\n",(0,i.jsx)(t.h4,{id:"addressaddr-string-serveroption",children:(0,i.jsx)(t.code,{children:"Address(addr string) ServerOption"})}),"\n",(0,i.jsx)(t.p,{children:"To set server's listening address."}),"\n",(0,i.jsx)(t.h4,{id:"timeouttimeout-timeduration-serveroption",children:(0,i.jsx)(t.code,{children:"Timeout(timeout time.Duration) ServerOption"})}),"\n",(0,i.jsx)(t.p,{children:"To set the server-side timeout."}),"\n",(0,i.jsx)(t.h4,{id:"loggerlogger-loglogger-serveroption",children:(0,i.jsx)(t.code,{children:"Logger(logger log.Logger) ServerOption"})}),"\n",(0,i.jsx)(t.p,{children:"To set logger."}),"\n",(0,i.jsx)(t.h4,{id:"middlewarem-middlewaremiddleware-serveroption",children:(0,i.jsx)(t.code,{children:"Middleware(m ...middleware.Middleware) ServerOption"})}),"\n",(0,i.jsx)(t.p,{children:"To set middleware for gRPC server."}),"\n",(0,i.jsx)(t.h4,{id:"tlsconfigc-tlsconfig-serveroption",children:(0,i.jsx)(t.code,{children:"TLSConfig(c *tls.Config) ServerOption"})}),"\n",(0,i.jsx)(t.p,{children:"To set TLS config."}),"\n",(0,i.jsx)(t.h4,{id:"unaryinterceptorin-grpcunaryserverinterceptor-serveroption",children:(0,i.jsx)(t.code,{children:"UnaryInterceptor(in ...grpc.UnaryServerInterceptor) ServerOption"})}),"\n",(0,i.jsx)(t.p,{children:"To set interceptors for gRPC server."}),"\n",(0,i.jsx)(t.h4,{id:"streaminterceptorin-grpcstreamserverinterceptor-serveroption",children:(0,i.jsx)(t.code,{children:"StreamInterceptor(in ...grpc.StreamServerInterceptor) ServerOption"})}),"\n",(0,i.jsx)(t.p,{children:"To set stream interceptors for gRPC server."}),"\n",(0,i.jsx)(t.h4,{id:"optionsopts-grpcserveroption-serveroption",children:(0,i.jsx)(t.code,{children:"Options(opts ...grpc.ServerOption) ServerOption"})}),"\n",(0,i.jsxs)(t.p,{children:["To set some extra ",(0,i.jsx)(t.code,{children:"grpc.ServerOption"}),"."]}),"\n",(0,i.jsx)(t.h3,{id:"implementation-details",children:"Implementation Details"}),"\n",(0,i.jsx)(t.h4,{id:"newserver",children:(0,i.jsx)(t.code,{children:"NewServer()"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'func NewServer(opts ...ServerOption) *Server {\n  \t// grpc server default configuration\n\tsrv := &Server{\n\t\tnetwork: "tcp",\n\t\taddress: ":0",\n\t\ttimeout: 1 * time.Second,\n\t\thealth:  health.NewServer(),\n\t\tlog:     log.NewHelper(log.GetLogger()),\n\t}\n  \t// apply opts\n\tfor _, o := range opts {\n\t\to(srv)\n\t}\n  \t// convert middleware to grpc interceptor\n\tunaryInts := []grpc.UnaryServerInterceptor{\n\t\tsrv.unaryServerInterceptor(),\n\t}\n\tstreamInts := []grpc.StreamServerInterceptor{\n\t\tsrv.streamServerInterceptor(),\n\t}\n\n\tif len(srv.unaryInts) > 0 {\n\t\tunaryInts = append(unaryInts, srv.unaryInts...)\n\t}\n\tif len(srv.streamInts) > 0 {\n\t\tstreamInts = append(streamInts, srv.streamInts...)\n\t}\n\n  \t// convert UnaryInterceptor and StreamInterceptor to ServerOption\n\tvar grpcOpts = []grpc.ServerOption{\n\t\tgrpc.ChainUnaryInterceptor(unaryInts...),\n\t\tgrpc.ChainStreamInterceptor(streamInts...),\n\t}\n\t// convert LTS config to ServerOption\n\tif srv.tlsConf != nil {\n\t\tgrpcOpts = append(grpcOpts, grpc.Creds(credentials.NewTLS(srv.tlsConf)))\n\t}\n\t// convert srv.grpcOpts to ServerOption\n\tif len(srv.grpcOpts) > 0 {\n\t\tgrpcOpts = append(grpcOpts, srv.grpcOpts...)\n\t}\n  \t// create grpc server\n\tsrv.Server = grpc.NewServer(grpcOpts...)\n  \t// create metadata server\n\tsrv.metadata = apimd.NewServer(srv.Server)\n\t// set lis and endpoint\n\tsrv.err = srv.listenAndEndpoint()\n\t// register these internal API\n\tgrpc_health_v1.RegisterHealthServer(srv.Server, srv.health)\n\tapimd.RegisterMetadataServer(srv.Server, srv.metadata)\n\treflection.Register(srv.Server)\n\treturn srv\n}\n'})}),"\n",(0,i.jsx)(t.h4,{id:"unaryserverinterceptor",children:(0,i.jsx)(t.code,{children:"unaryServerInterceptor()"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:"func (s *Server) unaryServerInterceptor() grpc.UnaryServerInterceptor {\n\treturn func(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (interface{}, error) {\n    \t// merge two ctx\n\t\tctx, cancel := ic.Merge(ctx, s.ctx)\n\t\tdefer cancel()\n    \t// get metadata from ctx\n\t\tmd, _ := grpcmd.FromIncomingContext(ctx)\n    \t// bind some information into ctx\n\t\treplyHeader := grpcmd.MD{}\n\t\tctx = transport.NewServerContext(ctx, &Transport{\n\t\t\tendpoint:    s.endpoint.String(),\n\t\t\toperation:   info.FullMethod,\n\t\t\treqHeader:   headerCarrier(md),\n\t\t\treplyHeader: headerCarrier(replyHeader),\n\t\t})\n    \t// set timeout\n\t\tif s.timeout > 0 {\n\t\t\tctx, cancel = context.WithTimeout(ctx, s.timeout)\n\t\t\tdefer cancel()\n\t\t}\n    \t// middleware\n\t\th := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\t\treturn handler(ctx, req)\n\t\t}\n\t\tif len(s.middleware) > 0 {\n\t\t\th = middleware.Chain(s.middleware...)(h)\n\t\t}\n\t\t// execute handler\n\t\treply, err := h(ctx, req)\n\t\tif len(replyHeader) > 0 {\n\t\t\t_ = grpc.SetHeader(ctx, replyHeader)\n\t\t}\n\t\treturn reply, err\n\t}\n}\n"})}),"\n",(0,i.jsx)(t.h3,{id:"usage",children:"Usage"}),"\n",(0,i.jsxs)(t.p,{children:["These are some basic usage of gRPC, you could refer to ",(0,i.jsx)(t.a,{href:"https://pkg.go.dev/google.golang.org/grpc",children:"gRPC Docs"})," for advanced examples."]}),"\n",(0,i.jsx)(t.h4,{id:"register-grpc-server",children:"Register gRPC Server"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'gs := grpc.NewServer()\napp := kratos.New(\n\tkratos.Name("kratos"),\n\tkratos.Version("v1.0.0"),\n\tkratos.Server(gs),\n)\n'})}),"\n",(0,i.jsx)(t.h4,{id:"set-middleware-in-grpc-server",children:"Set middleware in gRPC Server"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'grpcSrv := grpc.NewServer(\n\tgrpc.Address(":9000"),\n\tgrpc.Middleware(\n\t\tlogging.Server(),\n\t),\n)\n'})}),"\n",(0,i.jsx)(t.h4,{id:"process-request-in-grpc-middleware",children:"Process Request in gRPC Middleware"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:"if info, ok := transport.FromServerContext(ctx); ok {\n  kind = info.Kind().String()\n  operation = info.Operation()\n}\n"})}),"\n",(0,i.jsx)(t.h2,{id:"client",children:"Client"}),"\n",(0,i.jsx)(t.h3,{id:"options-1",children:"Options"}),"\n",(0,i.jsx)(t.h4,{id:"withendpointendpoint-string-clientoption",children:(0,i.jsx)(t.code,{children:"WithEndpoint(endpoint string) ClientOption"})}),"\n",(0,i.jsx)(t.p,{children:"To set the endpoint which the client will connect to."}),"\n",(0,i.jsx)(t.h4,{id:"withtimeouttimeout-timeduration-clientoption",children:(0,i.jsx)(t.code,{children:"WithTimeout(timeout time.Duration) ClientOption"})}),"\n",(0,i.jsx)(t.p,{children:"To set the client-side timeout."}),"\n",(0,i.jsx)(t.h4,{id:"withmiddlewarem-middlewaremiddleware-clientoption",children:(0,i.jsx)(t.code,{children:"WithMiddleware(m ...middleware.Middleware) ClientOption"})}),"\n",(0,i.jsx)(t.p,{children:"To set middleware."}),"\n",(0,i.jsx)(t.h4,{id:"withdiscoveryd-registrydiscovery-clientoption",children:(0,i.jsx)(t.code,{children:"WithDiscovery(d registry.Discovery) ClientOption"})}),"\n",(0,i.jsx)(t.p,{children:"To set the discovery for gRPC client."}),"\n",(0,i.jsx)(t.h4,{id:"withtlsconfigc-tlsconfig-clientoption",children:(0,i.jsx)(t.code,{children:"WithTLSConfig(c *tls.Config) ClientOption"})}),"\n",(0,i.jsx)(t.p,{children:"To set TLS config."}),"\n",(0,i.jsx)(t.h4,{id:"withunaryinterceptorin-grpcunaryclientinterceptor-clientoption",children:(0,i.jsx)(t.code,{children:"WithUnaryInterceptor(in ...grpc.UnaryClientInterceptor) ClientOption"})}),"\n",(0,i.jsx)(t.p,{children:"To set interceptors for gRPC client."}),"\n",(0,i.jsx)(t.h4,{id:"withoptionsopts-grpcdialoption-clientoption",children:(0,i.jsx)(t.code,{children:"WithOptions(opts ...grpc.DialOption) ClientOption"})}),"\n",(0,i.jsxs)(t.p,{children:["To set some extra ",(0,i.jsx)(t.code,{children:"grpc.ClientOption"}),"."]}),"\n",(0,i.jsx)(t.h4,{id:"withhealthcheckhealthcheck-bool-clientoption",children:(0,i.jsx)(t.code,{children:"WithHealthCheck(healthCheck bool) ClientOption"})}),"\n",(0,i.jsx)(t.p,{children:"To enable or disable the health check."}),"\n",(0,i.jsx)(t.h4,{id:"withnodefilterfilters-selectornodefilter-clientoption",children:(0,i.jsx)(t.code,{children:"WithNodeFilter(filters ...selector.NodeFilter) ClientOption"})}),"\n",(0,i.jsx)(t.p,{children:"Set filtering to exclude nodes that should not be requested."}),"\n",(0,i.jsx)(t.h3,{id:"implementation-details-1",children:"Implementation Details"}),"\n",(0,i.jsx)(t.h4,{id:"dial",children:(0,i.jsx)(t.code,{children:"dial()"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'func dial(ctx context.Context, insecure bool, opts ...ClientOption) (*grpc.ClientConn, error) {\n\t// default options\n  options := clientOptions{\n\t\ttimeout:      2000 * time.Millisecond,\n\t\tbalancerName: wrr.Name,\n\t\tlogger:       log.GetLogger(),\n\t}\n  \t// apply opts\n\tfor _, o := range opts {\n\t\to(&options)\n\t}\n  \t// convert middleware to grpc interceptor\n\tints := []grpc.UnaryClientInterceptor{\n\t\tunaryClientInterceptor(options.middleware, options.timeout, options.filters),\n\t}\n\tif len(options.ints) > 0 {\n\t\tints = append(ints, options.ints...)\n\t}\n\t// client side balancer\n\tgrpcOpts := []grpc.DialOption{\n\t\tgrpc.WithDefaultServiceConfig(fmt.Sprintf(`{"LoadBalancingPolicy": "%s"}`, options.balancerName)),\n\t\tgrpc.WithChainUnaryInterceptor(ints...),\n\t}\n\tif options.discovery != nil {\n    \t// To use service discovery\n\t\tgrpcOpts = append(grpcOpts,\n\t\t\tgrpc.WithResolvers(\n\t\t\t\tdiscovery.NewBuilder(\n\t\t\t\t\toptions.discovery,\n\t\t\t\t\tdiscovery.WithInsecure(insecure),\n\t\t\t\t\tdiscovery.WithLogger(options.logger),\n\t\t\t\t)))\n\t}\n\tif insecure {\n    \t// to disable transport security for connection\n\t\tgrpcOpts = append(grpcOpts, grpc.WithTransportCredentials(grpcinsecure.NewCredentials()))\n\t}\n\t// TLS config\n\tif options.tlsConf != nil {\n\t\tgrpcOpts = append(grpcOpts, grpc.WithTransportCredentials(credentials.NewTLS(options.tlsConf)))\n\t}\n\tif len(options.grpcOpts) > 0 {\n\t\tgrpcOpts = append(grpcOpts, options.grpcOpts...)\n\t}\n\treturn grpc.DialContext(ctx, options.endpoint, grpcOpts...)\n}\n'})}),"\n",(0,i.jsx)(t.h4,{id:"unaryclientinterceptor",children:(0,i.jsx)(t.code,{children:"unaryClientInterceptor()"})}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:"func unaryClientInterceptor(ms []middleware.Middleware, timeout time.Duration) grpc.UnaryClientInterceptor {\n\treturn func(ctx context.Context, method string, req, reply interface{}, cc *grpc.ClientConn, invoker grpc.UnaryInvoker, opts ...grpc.CallOption) error {\n    \t// bind some information into ctx\n\t\tctx = transport.NewClientContext(ctx, &Transport{\n\t\t\tendpoint:  cc.Target(),\n\t\t\toperation: method,\n\t\t\treqHeader: headerCarrier{},\n\t\t\tfilters:   filters,\n\t\t})\n\t\tif timeout > 0 {\n      \t\t// set the timeout\n\t\t\tvar cancel context.CancelFunc\n\t\t\tctx, cancel = context.WithTimeout(ctx, timeout)\n\t\t\tdefer cancel()\n\t\t}\n    \t// middleware \n\t\th := func(ctx context.Context, req interface{}) (interface{}, error) {\n\t\t\tif tr, ok := transport.FromClientContext(ctx); ok {\n\t\t\t\theader := tr.RequestHeader()\n\t\t\t\tkeys := header.Keys()\n\t\t\t\tkeyvals := make([]string, 0, len(keys))\n\t\t\t\tfor _, k := range keys {\n\t\t\t\t\tkeyvals = append(keyvals, k, header.Get(k))\n\t\t\t\t}\n\t\t\t\tctx = grpcmd.AppendToOutgoingContext(ctx, keyvals...)\n\t\t\t}\n\t\t\treturn reply, invoker(ctx, method, req, reply, cc, opts...)\n\t\t}\n\t\tif len(ms) > 0 {\n\t\t\th = middleware.Chain(ms...)(h)\n\t\t}\n\t\t_, err := h(ctx, req)\n\t\treturn err\n\t}\n}\n"})}),"\n",(0,i.jsx)(t.h3,{id:"usage-1",children:"Usage"}),"\n",(0,i.jsx)(t.h4,{id:"client-connection",children:"Client Connection"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'\tconn, err := grpc.DialInsecure(\n\t\tcontext.Background(),\n\t\tgrpc.WithEndpoint("127.0.0.1:9000"),\n\t)\n'})}),"\n",(0,i.jsx)(t.h4,{id:"middleware",children:"Middleware"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'conn, err := grpc.DialInsecure(\n\tcontext.Background(),\n\tgrpc.WithEndpoint("127.0.0.1:9000"),\n\tgrpc.WithTimeout(3600 * time.Second),\n  \tgrpc.WithMiddleware(\n\t\t  recovery.Recovery(),\n\t\t  validate.Validator(),\n\t),\n)\n'})}),"\n",(0,i.jsx)(t.h4,{id:"service-discovery",children:"Service Discovery"}),"\n",(0,i.jsx)(t.pre,{children:(0,i.jsx)(t.code,{className:"language-go",children:'conn, err := grpc.DialInsecure(\n\tcontext.Background(),\n\tgrpc.WithEndpoint("discovery:///helloworld"),\n\tgrpc.WithDiscovery(r),\n)\n'})}),"\n",(0,i.jsx)(t.h2,{id:"references",children:"References"}),"\n",(0,i.jsxs)(t.ul,{children:["\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://www.grpc.io/",children:"https://www.grpc.io/"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://www.grpc.io/docs/languages/go/quickstart/",children:"https://www.grpc.io/docs/languages/go/quickstart/"})}),"\n",(0,i.jsx)(t.li,{children:(0,i.jsx)(t.a,{href:"https://github.com/grpc/grpc-go",children:"https://github.com/grpc/grpc-go"})}),"\n"]})]})}function a(e={}){const{wrapper:t}={...(0,o.R)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(p,{...e})}):p(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>c,x:()=>s});var n=r(6540);const i={},o=n.createContext(i);function c(e){const t=n.useContext(o);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),n.createElement(o.Provider,{value:t},e.children)}}}]);