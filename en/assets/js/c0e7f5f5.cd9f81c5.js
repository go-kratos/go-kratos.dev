"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[226],{3905:function(e,t,r){r.d(t,{Zo:function(){return s},kt:function(){return u}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function i(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function a(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?i(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):i(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function l(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},i=Object.keys(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)r=i[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var p=n.createContext({}),c=function(e){var t=n.useContext(p),r=t;return e&&(r="function"==typeof e?e(t):a(a({},t),e)),r},s=function(e){var t=c(e.components);return n.createElement(p.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},g=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,i=e.originalType,p=e.parentName,s=l(e,["components","mdxType","originalType","parentName"]),g=c(r),u=o,v=g["".concat(p,".").concat(u)]||g[u]||d[u]||i;return r?n.createElement(v,a(a({ref:t},s),{},{components:r})):n.createElement(v,a({ref:t},s))}));function u(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var i=r.length,a=new Array(i);a[0]=g;var l={};for(var p in t)hasOwnProperty.call(t,p)&&(l[p]=t[p]);l.originalType=e,l.mdxType="string"==typeof e?e:o,a[1]=l;for(var c=2;c<i;c++)a[c]=r[c];return n.createElement.apply(null,a)}return n.createElement.apply(null,r)}g.displayName="MDXCreateElement"},2716:function(e,t,r){r.r(t),r.d(t,{assets:function(){return p},contentTitle:function(){return a},default:function(){return d},frontMatter:function(){return i},metadata:function(){return l},toc:function(){return c}});var n=r(3117),o=(r(7294),r(3905));const i={id:"grpc",title:"gRPC",keywords:["Go","Kratos","Toolkit","Framework","Microservices","Protobuf","gRPC","HTTP"]},a=void 0,l={unversionedId:"component/transport/grpc",id:"component/transport/grpc",title:"gRPC",description:"Our transporter/grpc is developed upon gRPC, and implements Transporter interface. You could use it for the communication between services on gRPC protocol.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/component/transport/03-grpc.md",sourceDirName:"component/transport",slug:"/component/transport/grpc",permalink:"/en/docs/component/transport/grpc",draft:!1,editUrl:"https://github.com/go-kratos/go-kratos.dev/edit/main/i18n/en/docusaurus-plugin-content-docs/current/component/transport/03-grpc.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{id:"grpc",title:"gRPC",keywords:["Go","Kratos","Toolkit","Framework","Microservices","Protobuf","gRPC","HTTP"]},sidebar:"docs",previous:{title:"HTTP",permalink:"/en/docs/component/transport/http"},next:{title:"\u7528\u6237\u6307\u5357",permalink:"/en/docs/category/\u7528\u6237\u6307\u5357"}},p={},c=[{value:"Server",id:"server",level:2},{value:"Options",id:"options",level:3},{value:"<code>Network(network string) ServerOption </code>",id:"networknetwork-string-serveroption-",level:4},{value:"<code>Address(addr string) ServerOption</code>",id:"addressaddr-string-serveroption",level:4},{value:"<code>Timeout(timeout time.Duration) ServerOption</code>",id:"timeouttimeout-timeduration-serveroption",level:4},{value:"<code>Logger(logger log.Logger) ServerOption</code>",id:"loggerlogger-loglogger-serveroption",level:4},{value:"<code>Middleware(m ...middleware.Middleware) ServerOption</code>",id:"middlewarem-middlewaremiddleware-serveroption",level:4},{value:"<code>TLSConfig(c *tls.Config) ServerOption</code>",id:"tlsconfigc-tlsconfig-serveroption",level:4},{value:"<code>UnaryInterceptor(in ...grpc.UnaryServerInterceptor) ServerOption</code>",id:"unaryinterceptorin-grpcunaryserverinterceptor-serveroption",level:4},{value:"<code>StreamInterceptor(in ...grpc.StreamServerInterceptor) ServerOption</code>",id:"streaminterceptorin-grpcstreamserverinterceptor-serveroption",level:4},{value:"<code>Options(opts ...grpc.ServerOption) ServerOption</code>",id:"optionsopts-grpcserveroption-serveroption",level:4},{value:"Implementation Details",id:"implementation-details",level:3},{value:"<code>NewServer()</code>",id:"newserver",level:4},{value:"<code>unaryServerInterceptor()</code>",id:"unaryserverinterceptor",level:4},{value:"Usage",id:"usage",level:3},{value:"Register gRPC Server",id:"register-grpc-server",level:4},{value:"Set middleware in gRPC Server",id:"set-middleware-in-grpc-server",level:4},{value:"Process Request in gRPC Middleware",id:"process-request-in-grpc-middleware",level:4},{value:"Client",id:"client",level:2},{value:"Options",id:"options-1",level:3},{value:"<code>WithEndpoint(endpoint string) ClientOption</code>",id:"withendpointendpoint-string-clientoption",level:4},{value:"<code>WithTimeout(timeout time.Duration) ClientOption</code>",id:"withtimeouttimeout-timeduration-clientoption",level:4},{value:"<code>WithMiddleware(m ...middleware.Middleware) ClientOption</code>",id:"withmiddlewarem-middlewaremiddleware-clientoption",level:4},{value:"<code>WithDiscovery(d registry.Discovery) ClientOption</code>",id:"withdiscoveryd-registrydiscovery-clientoption",level:4},{value:"<code>WithTLSConfig(c *tls.Config) ClientOption</code>",id:"withtlsconfigc-tlsconfig-clientoption",level:4},{value:"<code>WithUnaryInterceptor(in ...grpc.UnaryClientInterceptor) ClientOption</code>",id:"withunaryinterceptorin-grpcunaryclientinterceptor-clientoption",level:4},{value:"<code>WithOptions(opts ...grpc.DialOption) ClientOption</code>",id:"withoptionsopts-grpcdialoption-clientoption",level:4},{value:"<code>WithHealthCheck(healthCheck bool) ClientOption</code>",id:"withhealthcheckhealthcheck-bool-clientoption",level:4},{value:"<code>WithNodeFilter(filters ...selector.NodeFilter) ClientOption</code>",id:"withnodefilterfilters-selectornodefilter-clientoption",level:4},{value:"Implementation Details",id:"implementation-details-1",level:3},{value:"<code>dial()</code>",id:"dial",level:4},{value:"<code>unaryClientInterceptor()</code>",id:"unaryclientinterceptor",level:4},{value:"Usage",id:"usage-1",level:3},{value:"Client Connection",id:"client-connection",level:4},{value:"Middleware",id:"middleware",level:4},{value:"Service Discovery",id:"service-discovery",level:4},{value:"References",id:"references",level:2}],s={toc:c};function d(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"Our transporter/grpc is developed upon ",(0,o.kt)("a",{parentName:"p",href:"https://www.grpc.io/"},"gRPC"),", and implements ",(0,o.kt)("inlineCode",{parentName:"p"},"Transporter")," interface. You could use it for the communication between services on gRPC protocol."),(0,o.kt)("h2",{id:"server"},"Server"),(0,o.kt)("h3",{id:"options"},"Options"),(0,o.kt)("h4",{id:"networknetwork-string-serveroption-"},(0,o.kt)("inlineCode",{parentName:"h4"},"Network(network string) ServerOption ")),(0,o.kt)("p",null,"To set communication protocol such as tcp."),(0,o.kt)("h4",{id:"addressaddr-string-serveroption"},(0,o.kt)("inlineCode",{parentName:"h4"},"Address(addr string) ServerOption")),(0,o.kt)("p",null,"To set server's listening address."),(0,o.kt)("h4",{id:"timeouttimeout-timeduration-serveroption"},(0,o.kt)("inlineCode",{parentName:"h4"},"Timeout(timeout time.Duration) ServerOption")),(0,o.kt)("p",null,"To set the server-side timeout."),(0,o.kt)("h4",{id:"loggerlogger-loglogger-serveroption"},(0,o.kt)("inlineCode",{parentName:"h4"},"Logger(logger log.Logger) ServerOption")),(0,o.kt)("p",null,"To set logger."),(0,o.kt)("h4",{id:"middlewarem-middlewaremiddleware-serveroption"},(0,o.kt)("inlineCode",{parentName:"h4"},"Middleware(m ...middleware.Middleware) ServerOption")),(0,o.kt)("p",null,"To set middleware for gRPC server."),(0,o.kt)("h4",{id:"tlsconfigc-tlsconfig-serveroption"},(0,o.kt)("inlineCode",{parentName:"h4"},"TLSConfig(c *tls.Config) ServerOption")),(0,o.kt)("p",null,"To set TLS config."),(0,o.kt)("h4",{id:"unaryinterceptorin-grpcunaryserverinterceptor-serveroption"},(0,o.kt)("inlineCode",{parentName:"h4"},"UnaryInterceptor(in ...grpc.UnaryServerInterceptor) ServerOption")),(0,o.kt)("p",null,"To set interceptors for gRPC server."),(0,o.kt)("h4",{id:"streaminterceptorin-grpcstreamserverinterceptor-serveroption"},(0,o.kt)("inlineCode",{parentName:"h4"},"StreamInterceptor(in ...grpc.StreamServerInterceptor) ServerOption")),(0,o.kt)("p",null,"To set stream interceptors for gRPC server."),(0,o.kt)("h4",{id:"optionsopts-grpcserveroption-serveroption"},(0,o.kt)("inlineCode",{parentName:"h4"},"Options(opts ...grpc.ServerOption) ServerOption")),(0,o.kt)("p",null,"To set some extra ",(0,o.kt)("inlineCode",{parentName:"p"},"grpc.ServerOption"),"."),(0,o.kt)("h3",{id:"implementation-details"},"Implementation Details"),(0,o.kt)("h4",{id:"newserver"},(0,o.kt)("inlineCode",{parentName:"h4"},"NewServer()")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'func NewServer(opts ...ServerOption) *Server {\n    // grpc server default configuration\n    srv := &Server{\n        network: "tcp",\n        address: ":0",\n        timeout: 1 * time.Second,\n        health:  health.NewServer(),\n        log:     log.NewHelper(log.GetLogger()),\n    }\n    // apply opts\n    for _, o := range opts {\n        o(srv)\n    }\n    // convert middleware to grpc interceptor\n    unaryInts := []grpc.UnaryServerInterceptor{\n        srv.unaryServerInterceptor(),\n    }\n    streamInts := []grpc.StreamServerInterceptor{\n        srv.streamServerInterceptor(),\n    }\n\n    if len(srv.unaryInts) > 0 {\n        unaryInts = append(unaryInts, srv.unaryInts...)\n    }\n    if len(srv.streamInts) > 0 {\n        streamInts = append(streamInts, srv.streamInts...)\n    }\n\n    // convert UnaryInterceptor and StreamInterceptor to ServerOption\n    var grpcOpts = []grpc.ServerOption{\n        grpc.ChainUnaryInterceptor(unaryInts...),\n        grpc.ChainStreamInterceptor(streamInts...),\n    }\n    // convert LTS config to ServerOption\n    if srv.tlsConf != nil {\n        grpcOpts = append(grpcOpts, grpc.Creds(credentials.NewTLS(srv.tlsConf)))\n    }\n    // convert srv.grpcOpts to ServerOption\n    if len(srv.grpcOpts) > 0 {\n        grpcOpts = append(grpcOpts, srv.grpcOpts...)\n    }\n    // create grpc server\n    srv.Server = grpc.NewServer(grpcOpts...)\n    // create metadata server\n    srv.metadata = apimd.NewServer(srv.Server)\n    // set lis and endpoint\n    srv.err = srv.listenAndEndpoint()\n    // register these internal API\n    grpc_health_v1.RegisterHealthServer(srv.Server, srv.health)\n    apimd.RegisterMetadataServer(srv.Server, srv.metadata)\n    reflection.Register(srv.Server)\n    return srv\n}\n')),(0,o.kt)("h4",{id:"unaryserverinterceptor"},(0,o.kt)("inlineCode",{parentName:"h4"},"unaryServerInterceptor()")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func (s *Server) unaryServerInterceptor() grpc.UnaryServerInterceptor {\n    return func(ctx context.Context, req interface{}, info *grpc.UnaryServerInfo, handler grpc.UnaryHandler) (interface{}, error) {\n        // merge two ctx\n        ctx, cancel := ic.Merge(ctx, s.ctx)\n        defer cancel()\n        // get metadata from ctx\n        md, _ := grpcmd.FromIncomingContext(ctx)\n        // bind some information into ctx\n        replyHeader := grpcmd.MD{}\n        ctx = transport.NewServerContext(ctx, &Transport{\n            endpoint:    s.endpoint.String(),\n            operation:   info.FullMethod,\n            reqHeader:   headerCarrier(md),\n            replyHeader: headerCarrier(replyHeader),\n        })\n        // set timeout\n        if s.timeout > 0 {\n            ctx, cancel = context.WithTimeout(ctx, s.timeout)\n            defer cancel()\n        }\n        // middleware\n        h := func(ctx context.Context, req interface{}) (interface{}, error) {\n            return handler(ctx, req)\n        }\n        if len(s.middleware) > 0 {\n            h = middleware.Chain(s.middleware...)(h)\n        }\n        // execute handler\n        reply, err := h(ctx, req)\n        if len(replyHeader) > 0 {\n            _ = grpc.SetHeader(ctx, replyHeader)\n        }\n        return reply, err\n    }\n}\n")),(0,o.kt)("h3",{id:"usage"},"Usage"),(0,o.kt)("p",null,"These are some basic usage of gRPC, you could refer to ",(0,o.kt)("a",{parentName:"p",href:"https://pkg.go.dev/google.golang.org/grpc"},"gRPC Docs")," for advanced examples."),(0,o.kt)("h4",{id:"register-grpc-server"},"Register gRPC Server"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'gs := grpc.NewServer()\napp := kratos.New(\n    kratos.Name("kratos"),\n    kratos.Version("v1.0.0"),\n    kratos.Server(gs),\n)\n')),(0,o.kt)("h4",{id:"set-middleware-in-grpc-server"},"Set middleware in gRPC Server"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'grpcSrv := grpc.NewServer(\n    grpc.Address(":9000"),\n    grpc.Middleware(\n        logging.Server(),\n    ),\n)\n')),(0,o.kt)("h4",{id:"process-request-in-grpc-middleware"},"Process Request in gRPC Middleware"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"if info, ok := transport.FromServerContext(ctx); ok {\n  kind = info.Kind().String()\n  operation = info.Operation()\n}\n")),(0,o.kt)("h2",{id:"client"},"Client"),(0,o.kt)("h3",{id:"options-1"},"Options"),(0,o.kt)("h4",{id:"withendpointendpoint-string-clientoption"},(0,o.kt)("inlineCode",{parentName:"h4"},"WithEndpoint(endpoint string) ClientOption")),(0,o.kt)("p",null,"To set the endpoint which the client will connect to."),(0,o.kt)("h4",{id:"withtimeouttimeout-timeduration-clientoption"},(0,o.kt)("inlineCode",{parentName:"h4"},"WithTimeout(timeout time.Duration) ClientOption")),(0,o.kt)("p",null,"To set the client-side timeout."),(0,o.kt)("h4",{id:"withmiddlewarem-middlewaremiddleware-clientoption"},(0,o.kt)("inlineCode",{parentName:"h4"},"WithMiddleware(m ...middleware.Middleware) ClientOption")),(0,o.kt)("p",null,"To set middleware."),(0,o.kt)("h4",{id:"withdiscoveryd-registrydiscovery-clientoption"},(0,o.kt)("inlineCode",{parentName:"h4"},"WithDiscovery(d registry.Discovery) ClientOption")),(0,o.kt)("p",null,"To set the discovery for gRPC client."),(0,o.kt)("h4",{id:"withtlsconfigc-tlsconfig-clientoption"},(0,o.kt)("inlineCode",{parentName:"h4"},"WithTLSConfig(c *tls.Config) ClientOption")),(0,o.kt)("p",null,"To set TLS config."),(0,o.kt)("h4",{id:"withunaryinterceptorin-grpcunaryclientinterceptor-clientoption"},(0,o.kt)("inlineCode",{parentName:"h4"},"WithUnaryInterceptor(in ...grpc.UnaryClientInterceptor) ClientOption")),(0,o.kt)("p",null,"To set interceptors for gRPC client."),(0,o.kt)("h4",{id:"withoptionsopts-grpcdialoption-clientoption"},(0,o.kt)("inlineCode",{parentName:"h4"},"WithOptions(opts ...grpc.DialOption) ClientOption")),(0,o.kt)("p",null,"To set some extra ",(0,o.kt)("inlineCode",{parentName:"p"},"grpc.ClientOption"),"."),(0,o.kt)("h4",{id:"withhealthcheckhealthcheck-bool-clientoption"},(0,o.kt)("inlineCode",{parentName:"h4"},"WithHealthCheck(healthCheck bool) ClientOption")),(0,o.kt)("p",null,"To enable or disable the health check."),(0,o.kt)("h4",{id:"withnodefilterfilters-selectornodefilter-clientoption"},(0,o.kt)("inlineCode",{parentName:"h4"},"WithNodeFilter(filters ...selector.NodeFilter) ClientOption")),(0,o.kt)("p",null,"Set filtering to exclude nodes that should not be requested."),(0,o.kt)("h3",{id:"implementation-details-1"},"Implementation Details"),(0,o.kt)("h4",{id:"dial"},(0,o.kt)("inlineCode",{parentName:"h4"},"dial()")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'func dial(ctx context.Context, insecure bool, opts ...ClientOption) (*grpc.ClientConn, error) {\n    // default options\n  options := clientOptions{\n        timeout:      2000 * time.Millisecond,\n        balancerName: wrr.Name,\n        logger:       log.GetLogger(),\n    }\n    // apply opts\n    for _, o := range opts {\n        o(&options)\n    }\n    // convert middleware to grpc interceptor\n    ints := []grpc.UnaryClientInterceptor{\n        unaryClientInterceptor(options.middleware, options.timeout, options.filters),\n    }\n    if len(options.ints) > 0 {\n        ints = append(ints, options.ints...)\n    }\n    // client side balancer\n    grpcOpts := []grpc.DialOption{\n        grpc.WithDefaultServiceConfig(fmt.Sprintf(`{"LoadBalancingPolicy": "%s"}`, options.balancerName)),\n        grpc.WithChainUnaryInterceptor(ints...),\n    }\n    if options.discovery != nil {\n        // To use service discovery\n        grpcOpts = append(grpcOpts,\n            grpc.WithResolvers(\n                discovery.NewBuilder(\n                    options.discovery,\n                    discovery.WithInsecure(insecure),\n                    discovery.WithLogger(options.logger),\n                )))\n    }\n    if insecure {\n        // to disable transport security for connection\n        grpcOpts = append(grpcOpts, grpc.WithTransportCredentials(grpcinsecure.NewCredentials()))\n    }\n    // TLS config\n    if options.tlsConf != nil {\n        grpcOpts = append(grpcOpts, grpc.WithTransportCredentials(credentials.NewTLS(options.tlsConf)))\n    }\n    if len(options.grpcOpts) > 0 {\n        grpcOpts = append(grpcOpts, options.grpcOpts...)\n    }\n    return grpc.DialContext(ctx, options.endpoint, grpcOpts...)\n}\n')),(0,o.kt)("h4",{id:"unaryclientinterceptor"},(0,o.kt)("inlineCode",{parentName:"h4"},"unaryClientInterceptor()")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func unaryClientInterceptor(ms []middleware.Middleware, timeout time.Duration) grpc.UnaryClientInterceptor {\n    return func(ctx context.Context, method string, req, reply interface{}, cc *grpc.ClientConn, invoker grpc.UnaryInvoker, opts ...grpc.CallOption) error {\n        // bind some information into ctx\n        ctx = transport.NewClientContext(ctx, &Transport{\n            endpoint:  cc.Target(),\n            operation: method,\n            reqHeader: headerCarrier{},\n            filters:   filters,\n        })\n        if timeout > 0 {\n            // set the timeout\n            var cancel context.CancelFunc\n            ctx, cancel = context.WithTimeout(ctx, timeout)\n            defer cancel()\n        }\n        // middleware \n        h := func(ctx context.Context, req interface{}) (interface{}, error) {\n            if tr, ok := transport.FromClientContext(ctx); ok {\n                header := tr.RequestHeader()\n                keys := header.Keys()\n                keyvals := make([]string, 0, len(keys))\n                for _, k := range keys {\n                    keyvals = append(keyvals, k, header.Get(k))\n                }\n                ctx = grpcmd.AppendToOutgoingContext(ctx, keyvals...)\n            }\n            return reply, invoker(ctx, method, req, reply, cc, opts...)\n        }\n        if len(ms) > 0 {\n            h = middleware.Chain(ms...)(h)\n        }\n        _, err := h(ctx, req)\n        return err\n    }\n}\n")),(0,o.kt)("h3",{id:"usage-1"},"Usage"),(0,o.kt)("h4",{id:"client-connection"},"Client Connection"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'    conn, err := grpc.DialInsecure(\n        context.Background(),\n        grpc.WithEndpoint("127.0.0.1:9000"),\n    )\n')),(0,o.kt)("h4",{id:"middleware"},"Middleware"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'conn, err := grpc.DialInsecure(\n    context.Background(),\n    grpc.WithEndpoint("127.0.0.1:9000"),\n    grpc.WithTimeout(3600 * time.Second),\n    grpc.WithMiddleware(\n          recovery.Recovery(),\n          validate.Validator(),\n    ),\n)\n')),(0,o.kt)("h4",{id:"service-discovery"},"Service Discovery"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'conn, err := grpc.DialInsecure(\n    context.Background(),\n    grpc.WithEndpoint("discovery:///helloworld"),\n    grpc.WithDiscovery(r),\n)\n')),(0,o.kt)("h2",{id:"references"},"References"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://www.grpc.io/"},"https://www.grpc.io/")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://www.grpc.io/docs/languages/go/quickstart/"},"https://www.grpc.io/docs/languages/go/quickstart/")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/grpc/grpc-go"},"https://github.com/grpc/grpc-go"))))}d.isMDXComponent=!0}}]);