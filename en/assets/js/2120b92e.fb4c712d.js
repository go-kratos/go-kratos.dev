"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[5914],{1288:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>c,default:()=>p,frontMatter:()=>a,metadata:()=>n,toc:()=>s});const n=JSON.parse('{"id":"component/middleware/tracing","title":"Tracing","description":"We use OpenTelemetry for distributed tracing.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/component/middleware/08-tracing.md","sourceDirName":"component/middleware","slug":"/component/middleware/tracing","permalink":"/en/docs/component/middleware/tracing","draft":false,"unlisted":false,"editUrl":"https://github.com/go-kratos/go-kratos.dev/edit/main/i18n/en/docusaurus-plugin-content-docs/current/component/middleware/08-tracing.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"id":"tracing","title":"Tracing","keywords":["Go","Kratos","Toolkit","Framework","Microservices","Protobuf","gRPC","HTTP"]},"sidebar":"docs","previous":{"title":"Recovery","permalink":"/en/docs/component/middleware/recovery"},"next":{"title":"Validate","permalink":"/en/docs/component/middleware/validate"}}');var o=r(4848),i=r(8453);const a={id:"tracing",title:"Tracing",keywords:["Go","Kratos","Toolkit","Framework","Microservices","Protobuf","gRPC","HTTP"]},c=void 0,l={},s=[{value:"Configuration",id:"configuration",level:3},{value:"<code>WithTracerProvider</code>",id:"withtracerprovider",level:4},{value:"<code>WithPropagator</code>",id:"withpropagator",level:4},{value:"Usage",id:"usage",level:3},{value:"Tracing for Server",id:"tracing-for-server",level:4},{value:"Tracing for Client",id:"tracing-for-client",level:4},{value:"Automatic Data Collection",id:"automatic-data-collection",level:4},{value:"References",id:"references",level:3}];function d(e){const t={a:"a",code:"code",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(t.p,{children:"We use OpenTelemetry for distributed tracing."}),"\n",(0,o.jsx)(t.h3,{id:"configuration",children:"Configuration"}),"\n",(0,o.jsxs)(t.p,{children:["There are two methods for configuration ",(0,o.jsx)(t.code,{children:"WithTracerProvider()"})," and ",(0,o.jsx)(t.code,{children:"WithPropagator()"}),"."]}),"\n",(0,o.jsx)(t.h4,{id:"withtracerprovider",children:(0,o.jsx)(t.code,{children:"WithTracerProvider"})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-go",children:"func WithTracerProvider(provider trace.TracerProvider) Option {\n\treturn func(opts *options) {\n\t\topts.TracerProvider = provider\n\t}\n}    \n"})}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"WithTracerProvider"})," is for setting the provider, it accepts ",(0,o.jsx)(t.code,{children:"trace.TracerProvider"})]}),"\n",(0,o.jsx)(t.h4,{id:"withpropagator",children:(0,o.jsx)(t.code,{children:"WithPropagator"})}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-go",children:"func WithPropagator(propagator propagation.TextMapPropagator) Option {\n\treturn func(opts *options) {\n\t\topts.Propagator = propagator\n\t}\n}\n"})}),"\n",(0,o.jsxs)(t.p,{children:[(0,o.jsx)(t.code,{children:"WithPropagator"})," is for setting the text map propagator, it accepts ",(0,o.jsx)(t.code,{children:"propagation.TextMapPropagator"})]}),"\n",(0,o.jsx)(t.h3,{id:"usage",children:"Usage"}),"\n",(0,o.jsx)(t.h4,{id:"tracing-for-server",children:"Tracing for Server"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-go",children:'package server\n\nimport (\n\t"github.com/go-kratos/kratos/v2/middleware/tracing"\n\t"github.com/go-kratos/kratos/v2/transport/grpc"\n\n\t"go.opentelemetry.io/otel"\n\t"go.opentelemetry.io/otel/attribute"\n\t"go.opentelemetry.io/otel/exporters/jaeger"\n\t"go.opentelemetry.io/otel/sdk/resource"\n\ttracesdk "go.opentelemetry.io/otel/sdk/trace"\n\tsemconv "go.opentelemetry.io/otel/semconv/v1.4.0"\n)\n\n// Set global trace provider\nfunc initTracer(url string) error {\n\t// Create the Jaeger exporter\n\texp, err := jaeger.New(jaeger.WithCollectorEndpoint(jaeger.WithEndpoint(url)))\n\tif err != nil {\n\t\treturn err\n\t}\n\ttp := tracesdk.NewTracerProvider(\n\t\t// Set the sampling rate based on the parent span to 100%\n\t\ttracesdk.WithSampler(tracesdk.ParentBased(tracesdk.TraceIDRatioBased(1.0))),\n\t\t// Always be sure to batch in production.\n\t\ttracesdk.WithBatcher(exp),\n\t\t// Record information about this application in an Resource.\n\t\ttracesdk.WithResource(resource.NewSchemaless(\n\t\t\tsemconv.ServiceNameKey.String("kratos-trace"),\n\t\t\tattribute.String("exporter", "jaeger"),\n\t\t\tattribute.Float64("float", 312.23),\n\t\t)),\n\t)\n\totel.SetTracerProvider(tp)\n\treturn nil\n}\n\n// NewGRPCServer new a gRPC server.\nfunc NewGRPCServer(c *conf.Server, executor *service.ExecutorService) *grpc.Server {\n\terr := initTracer("http://localhost:14268/api/traces")\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\t//tr := otel.Tracer("component-main")\n\tvar opts = []grpc.ServerOption{\n\t\tgrpc.Middleware(\n\t\t\ttracing.Server(),\n\t\t),\n\t}\n\t// ...\n}\n'})}),"\n",(0,o.jsx)(t.h4,{id:"tracing-for-client",children:"Tracing for Client"}),"\n",(0,o.jsx)(t.pre,{children:(0,o.jsx)(t.code,{className:"language-go",children:'package client\n\nimport (\n\t"context"\n\n\t"github.com/go-kratos/kratos/v2/middleware/tracing"\n\t"github.com/go-kratos/kratos/v2/transport/grpc"\n\n\t"go.opentelemetry.io/otel"\n\t"go.opentelemetry.io/otel/attribute"\n\t"go.opentelemetry.io/otel/exporters/jaeger"\n\t"go.opentelemetry.io/otel/sdk/resource"\n\ttracesdk "go.opentelemetry.io/otel/sdk/trace"\n\tsemconv "go.opentelemetry.io/otel/semconv/v1.4.0"\n\tgooglegrpc "google.golang.org/grpc"\n)\n\n// Set global trace provider\nfunc initTracer(url string) error {\n\t// Create the Jaeger exporter\n\texp, err := jaeger.New(jaeger.WithCollectorEndpoint(jaeger.WithEndpoint(url)))\n\tif err != nil {\n\t\treturn err\n\t}\n\ttp := tracesdk.NewTracerProvider(\n\t\t// Set the sampling rate based on the parent span to 100%\n\t\ttracesdk.WithSampler(tracesdk.ParentBased(tracesdk.TraceIDRatioBased(1.0))),\n\t\t// Always be sure to batch in production.\n\t\ttracesdk.WithBatcher(exp),\n\t\t// Record information about this application in an Resource.\n\t\ttracesdk.WithResource(resource.NewSchemaless(\n\t\t\tsemconv.ServiceNameKey.String("kratos-trace"),\n\t\t\tattribute.String("exporter", "jaeger"),\n\t\t\tattribute.Float64("float", 312.23),\n\t\t)),\n\t)\n\totel.SetTracerProvider(tp)\n\treturn nil\n}\n\nfunc grpcCli() (*googlegrpc.ClientConn, error) {\n\t// If the project does not initialize initTracer, please initialize.\n\treturn grpc.DialInsecure(\n\t\tcontext.Background(),\n\t\tgrpc.WithMiddleware(\n\t\t\ttracing.Client(),\n\t\t),\n\t)\n}\n'})}),"\n",(0,o.jsx)(t.h4,{id:"automatic-data-collection",children:"Automatic Data Collection"}),"\n",(0,o.jsxs)(t.p,{children:["If you don't want to modify the code manually, you can also use Agent for automatic collection of OpenTelemetry data, such as ",(0,o.jsx)(t.a,{href:"https://github.com/alibaba/opentelemetry-go-auto-instrumentation",children:"Alibaba Go Auto Instrumentation"})," (which will later be officially donated to ",(0,o.jsx)(t.a,{href:"https://github.com/open-telemetry/opentelemetry-go-compile-instrumentation",children:"OpenTelemetry Official Repository"}),")."]}),"\n",(0,o.jsxs)(t.p,{children:["You can refer to the ",(0,o.jsx)(t.a,{href:"https://github.com/alibaba/opentelemetry-go-auto-instrumentation/blob/main/README.md",children:"documentation"})," to compile your Kratos application."]}),"\n",(0,o.jsx)(t.h3,{id:"references",children:"References"}),"\n",(0,o.jsxs)(t.ul,{children:["\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.a,{href:"https://opentelemetry.io/",children:"https://opentelemetry.io/"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.a,{href:"https://github.com/open-telemetry/opentelemetry-go/tree/main/example",children:"https://github.com/open-telemetry/opentelemetry-go/tree/main/example"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.a,{href:"https://pkg.go.dev/go.opentelemetry.io/otel",children:"https://pkg.go.dev/go.opentelemetry.io/otel"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.a,{href:"https://github.com/alibaba/opentelemetry-go-auto-instrumentation",children:"https://github.com/alibaba/opentelemetry-go-auto-instrumentation"})}),"\n",(0,o.jsx)(t.li,{children:(0,o.jsx)(t.a,{href:"https://github.com/open-telemetry/opentelemetry-go-compile-instrumentation",children:"https://github.com/open-telemetry/opentelemetry-go-compile-instrumentation"})}),"\n"]})]})}function p(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,o.jsx)(t,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>a,x:()=>c});var n=r(6540);const o={},i=n.createContext(o);function a(e){const t=n.useContext(i);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:a(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);