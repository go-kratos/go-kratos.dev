"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1333],{3905:function(e,t,r){r.d(t,{Zo:function(){return s},kt:function(){return g}});var n=r(7294);function o(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function a(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function i(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?a(Object(r),!0).forEach((function(t){o(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):a(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,o=function(e,t){if(null==e)return{};var r,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||(o[r]=e[r]);return o}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)r=a[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(o[r]=e[r])}return o}var l=n.createContext({}),p=function(e){var t=n.useContext(l),r=t;return e&&(r="function"==typeof e?e(t):i(i({},t),e)),r},s=function(e){var t=p(e.components);return n.createElement(l.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},m=n.forwardRef((function(e,t){var r=e.components,o=e.mdxType,a=e.originalType,l=e.parentName,s=c(e,["components","mdxType","originalType","parentName"]),m=p(r),g=o,d=m["".concat(l,".").concat(g)]||m[g]||u[g]||a;return r?n.createElement(d,i(i({ref:t},s),{},{components:r})):n.createElement(d,i({ref:t},s))}));function g(e,t){var r=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=r.length,i=new Array(a);i[0]=m;var c={};for(var l in t)hasOwnProperty.call(t,l)&&(c[l]=t[l]);c.originalType=e,c.mdxType="string"==typeof e?e:o,i[1]=c;for(var p=2;p<a;p++)i[p]=r[p];return n.createElement.apply(null,i)}return n.createElement.apply(null,r)}m.displayName="MDXCreateElement"},8179:function(e,t,r){r.r(t),r.d(t,{assets:function(){return l},contentTitle:function(){return i},default:function(){return u},frontMatter:function(){return a},metadata:function(){return c},toc:function(){return p}});var n=r(3117),o=(r(7294),r(3905));const a={id:"tracing",title:"Tracing",keywords:["Go","Kratos","Toolkit","Framework","Microservices","Protobuf","gRPC","HTTP"]},i=void 0,c={unversionedId:"component/middleware/tracing",id:"component/middleware/tracing",title:"Tracing",description:"We use OpenTelemetry for distributed tracing.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/component/middleware/08-tracing.md",sourceDirName:"component/middleware",slug:"/component/middleware/tracing",permalink:"/en/docs/component/middleware/tracing",draft:!1,editUrl:"https://github.com/go-kratos/go-kratos.dev/edit/main/i18n/en/docusaurus-plugin-content-docs/current/component/middleware/08-tracing.md",tags:[],version:"current",sidebarPosition:8,frontMatter:{id:"tracing",title:"Tracing",keywords:["Go","Kratos","Toolkit","Framework","Microservices","Protobuf","gRPC","HTTP"]},sidebar:"docs",previous:{title:"Recovery",permalink:"/en/docs/component/middleware/recovery"},next:{title:"Validate",permalink:"/en/docs/component/middleware/validate"}},l={},p=[{value:"Configuration",id:"configuration",level:3},{value:"<code>WithTracerProvider</code>",id:"withtracerprovider",level:4},{value:"<code>WithPropagator</code>",id:"withpropagator",level:4},{value:"Usage",id:"usage",level:3},{value:"Tracing for Server",id:"tracing-for-server",level:4},{value:"Tracing for Client",id:"tracing-for-client",level:4},{value:"Automatic Data Collection",id:"automatic-data-collection",level:4},{value:"References",id:"references",level:3}],s={toc:p};function u(e){let{components:t,...r}=e;return(0,o.kt)("wrapper",(0,n.Z)({},s,r,{components:t,mdxType:"MDXLayout"}),(0,o.kt)("p",null,"We use OpenTelemetry for distributed tracing."),(0,o.kt)("h3",{id:"configuration"},"Configuration"),(0,o.kt)("p",null,"There are two methods for configuration ",(0,o.kt)("inlineCode",{parentName:"p"},"WithTracerProvider()")," and ",(0,o.kt)("inlineCode",{parentName:"p"},"WithPropagator()"),"."),(0,o.kt)("h4",{id:"withtracerprovider"},(0,o.kt)("inlineCode",{parentName:"h4"},"WithTracerProvider")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func WithTracerProvider(provider trace.TracerProvider) Option {\n    return func(opts *options) {\n        opts.TracerProvider = provider\n    }\n}    \n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"WithTracerProvider")," is for setting the provider, it accepts ",(0,o.kt)("inlineCode",{parentName:"p"},"trace.TracerProvider")),(0,o.kt)("h4",{id:"withpropagator"},(0,o.kt)("inlineCode",{parentName:"h4"},"WithPropagator")),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},"func WithPropagator(propagator propagation.TextMapPropagator) Option {\n    return func(opts *options) {\n        opts.Propagator = propagator\n    }\n}\n")),(0,o.kt)("p",null,(0,o.kt)("inlineCode",{parentName:"p"},"WithPropagator")," is for setting the text map propagator, it accepts ",(0,o.kt)("inlineCode",{parentName:"p"},"propagation.TextMapPropagator")),(0,o.kt)("h3",{id:"usage"},"Usage"),(0,o.kt)("h4",{id:"tracing-for-server"},"Tracing for Server"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'package server\n\nimport (\n    "github.com/go-kratos/kratos/v2/middleware/tracing"\n    "github.com/go-kratos/kratos/v2/transport/grpc"\n\n    "go.opentelemetry.io/otel"\n    "go.opentelemetry.io/otel/attribute"\n    "go.opentelemetry.io/otel/exporters/jaeger"\n    "go.opentelemetry.io/otel/sdk/resource"\n    tracesdk "go.opentelemetry.io/otel/sdk/trace"\n    semconv "go.opentelemetry.io/otel/semconv/v1.4.0"\n)\n\n// Set global trace provider\nfunc initTracer(url string) error {\n    // Create the Jaeger exporter\n    exp, err := jaeger.New(jaeger.WithCollectorEndpoint(jaeger.WithEndpoint(url)))\n    if err != nil {\n        return err\n    }\n    tp := tracesdk.NewTracerProvider(\n        // Set the sampling rate based on the parent span to 100%\n        tracesdk.WithSampler(tracesdk.ParentBased(tracesdk.TraceIDRatioBased(1.0))),\n        // Always be sure to batch in production.\n        tracesdk.WithBatcher(exp),\n        // Record information about this application in an Resource.\n        tracesdk.WithResource(resource.NewSchemaless(\n            semconv.ServiceNameKey.String("kratos-trace"),\n            attribute.String("exporter", "jaeger"),\n            attribute.Float64("float", 312.23),\n        )),\n    )\n    otel.SetTracerProvider(tp)\n    return nil\n}\n\n// NewGRPCServer new a gRPC server.\nfunc NewGRPCServer(c *conf.Server, executor *service.ExecutorService) *grpc.Server {\n    err := initTracer("http://localhost:14268/api/traces")\n    if err != nil {\n        panic(err)\n    }\n    //tr := otel.Tracer("component-main")\n    var opts = []grpc.ServerOption{\n        grpc.Middleware(\n            tracing.Server(),\n        ),\n    }\n    // ...\n}\n')),(0,o.kt)("h4",{id:"tracing-for-client"},"Tracing for Client"),(0,o.kt)("pre",null,(0,o.kt)("code",{parentName:"pre",className:"language-go"},'package client\n\nimport (\n    "context"\n\n    "github.com/go-kratos/kratos/v2/middleware/tracing"\n    "github.com/go-kratos/kratos/v2/transport/grpc"\n\n    "go.opentelemetry.io/otel"\n    "go.opentelemetry.io/otel/attribute"\n    "go.opentelemetry.io/otel/exporters/jaeger"\n    "go.opentelemetry.io/otel/sdk/resource"\n    tracesdk "go.opentelemetry.io/otel/sdk/trace"\n    semconv "go.opentelemetry.io/otel/semconv/v1.4.0"\n    googlegrpc "google.golang.org/grpc"\n)\n\n// Set global trace provider\nfunc initTracer(url string) error {\n    // Create the Jaeger exporter\n    exp, err := jaeger.New(jaeger.WithCollectorEndpoint(jaeger.WithEndpoint(url)))\n    if err != nil {\n        return err\n    }\n    tp := tracesdk.NewTracerProvider(\n        // Set the sampling rate based on the parent span to 100%\n        tracesdk.WithSampler(tracesdk.ParentBased(tracesdk.TraceIDRatioBased(1.0))),\n        // Always be sure to batch in production.\n        tracesdk.WithBatcher(exp),\n        // Record information about this application in an Resource.\n        tracesdk.WithResource(resource.NewSchemaless(\n            semconv.ServiceNameKey.String("kratos-trace"),\n            attribute.String("exporter", "jaeger"),\n            attribute.Float64("float", 312.23),\n        )),\n    )\n    otel.SetTracerProvider(tp)\n    return nil\n}\n\nfunc grpcCli() (*googlegrpc.ClientConn, error) {\n    // If the project does not initialize initTracer, please initialize.\n    return grpc.DialInsecure(\n        context.Background(),\n        grpc.WithMiddleware(\n            tracing.Client(),\n        ),\n    )\n}\n')),(0,o.kt)("h4",{id:"automatic-data-collection"},"Automatic Data Collection"),(0,o.kt)("p",null,"If you don't want to modify the code manually, you can also use Agent for automatic collection of OpenTelemetry data, such as ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/alibaba/opentelemetry-go-auto-instrumentation"},"Alibaba Go Auto Instrumentation")," (which will later be officially donated to ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/open-telemetry/opentelemetry-go-compile-instrumentation"},"OpenTelemetry Official Repository"),")."),(0,o.kt)("p",null,"You can refer to the ",(0,o.kt)("a",{parentName:"p",href:"https://github.com/alibaba/opentelemetry-go-auto-instrumentation/blob/main/README.md"},"documentation")," to compile your Kratos application."),(0,o.kt)("h3",{id:"references"},"References"),(0,o.kt)("ul",null,(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://opentelemetry.io/"},"https://opentelemetry.io/")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/open-telemetry/opentelemetry-go/tree/main/example"},"https://github.com/open-telemetry/opentelemetry-go/tree/main/example")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://pkg.go.dev/go.opentelemetry.io/otel"},"https://pkg.go.dev/go.opentelemetry.io/otel")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/alibaba/opentelemetry-go-auto-instrumentation"},"https://github.com/alibaba/opentelemetry-go-auto-instrumentation")),(0,o.kt)("li",{parentName:"ul"},(0,o.kt)("a",{parentName:"li",href:"https://github.com/open-telemetry/opentelemetry-go-compile-instrumentation"},"https://github.com/open-telemetry/opentelemetry-go-compile-instrumentation"))))}u.isMDXComponent=!0}}]);