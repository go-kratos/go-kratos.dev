"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[6186],{8167:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>o,toc:()=>c});const o=JSON.parse('{"id":"guide/api-protobuf","title":"Protobuf Guideline","description":"This documentation is the guideline of Protobuf definition which recommended in Kratos project.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/guide/01-api-protobuf.md","sourceDirName":"guide","slug":"/guide/api-protobuf","permalink":"/en/docs/guide/api-protobuf","draft":false,"unlisted":false,"editUrl":"https://github.com/go-kratos/go-kratos.dev/edit/main/i18n/en/docusaurus-plugin-content-docs/current/guide/01-api-protobuf.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"id":"api-protobuf","title":"Protobuf Guideline"},"sidebar":"docs","previous":{"title":"\u7528\u6237\u6307\u5357","permalink":"/en/docs/category/\u7528\u6237\u6307\u5357"},"next":{"title":"OpenAPI Swagger","permalink":"/en/docs/guide/openapi"}}');var r=i(4848),s=i(8453);const t={id:"api-protobuf",title:"Protobuf Guideline"},a=void 0,l={},c=[{value:"Directory Structure",id:"directory-structure",level:2},{value:"Package",id:"package",level:2},{value:"go_package",id:"go_package",level:3},{value:"java_package",id:"java_package",level:3},{value:"objc_class_prefix",id:"objc_class_prefix",level:3},{value:"Version",id:"version",level:2},{value:"Import",id:"import",level:2},{value:"Naming Convention",id:"naming-convention",level:2},{value:"Directory Structure",id:"directory-structure-1",level:3},{value:"File Structure",id:"file-structure",level:3},{value:"Message &amp; Field Naming",id:"message--field-naming",level:3},{value:"Repeated Fields",id:"repeated-fields",level:3},{value:"Enums",id:"enums",level:3},{value:"Services",id:"services",level:3},{value:"Comment",id:"comment",level:2},{value:"Examples",id:"examples",level:2},{value:"References",id:"references",level:2}];function d(e){const n={a:"a",br:"br",code:"code",h2:"h2",h3:"h3",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.p,{children:"This documentation is the guideline of Protobuf definition which recommended in Kratos project."}),"\n",(0,r.jsx)(n.p,{children:"The API definition is based on HTTP and gRPC, written with Protobuf format They should includes all the Request, Reply and the corresponding Errors."}),"\n",(0,r.jsx)(n.h2,{id:"directory-structure",children:"Directory Structure"}),"\n",(0,r.jsxs)(n.p,{children:["The definition of Proto could be either in ",(0,r.jsx)(n.code,{children:"api"})," directory of the project or in a unified repository, likes ",(0,r.jsx)(n.code,{children:"googleapis"}),", ",(0,r.jsx)(n.code,{children:"envoy-api"}),", ",(0,r.jsx)(n.code,{children:"istio-api"}),"."]}),"\n",(0,r.jsx)(n.p,{children:"For the proto in project, the api should be used as the root of package name."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"kratos-demo\uff1a\n|____api // The definition of service's API\n| |____kratos\n| | |____demo\n| | | |____v1\n| | | | |____demo.proto\n"})}),"\n",(0,r.jsx)(n.p,{children:"For the proto in unified repository, the repository name should be used as the root of package name."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"kratos-apis:\n|____api // The definition of service's API\n| |____kratos\n| | |____demo\n| | | |____v1\n| | | | |____demo.proto\n|____annotations // the options annotations\n|____third_party // third-party protos\n"})}),"\n",(0,r.jsx)(n.h2,{id:"package",children:"Package"}),"\n",(0,r.jsx)(n.p,{children:"The name of the package (APP_ID) will be used for generate the request path of gRPC API or the path for proto importing."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.code,{children:"my.package.v1"})," is the API's directory, which defines the API of the services."]}),"\n"]}),"\n",(0,r.jsx)(n.p,{children:"For example."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-protobuf",children:"// RequestURL: /<package_name>.<version>.<service_name>/{method}\npackage <package_name>.<version>;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"go_package",children:"go_package"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-protobuf",children:'option go_package = "github.com/go-kratos/kratos/<package_name>;<version>";\n'})}),"\n",(0,r.jsx)(n.h3,{id:"java_package",children:"java_package"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-protobuf",children:'option java_multiple_files = true;\noption java_package = "com.github.kratos.<package_name>.<version>";\n'})}),"\n",(0,r.jsx)(n.h3,{id:"objc_class_prefix",children:"objc_class_prefix"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-protobuf",children:'option objc_class_prefix = "<PackageNameVersion>";\n'})}),"\n",(0,r.jsx)(n.h2,{id:"version",children:"Version"}),"\n",(0,r.jsxs)(n.p,{children:["This version is for incompatible version and always used with ",(0,r.jsx)(n.code,{children:"<package_name>"}),". It should be modified for API breaking changes."]}),"\n",(0,r.jsx)(n.h2,{id:"import",children:"Import"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"the proto dependencies' import path should be started from root path."}),"\n",(0,r.jsxs)(n.li,{children:["third_party, includes the proto from third-party such as ",(0,r.jsx)(n.code,{children:"protobuf"}),", ",(0,r.jsx)(n.code,{children:"google rpc"}),",",(0,r.jsx)(n.code,{children:"google apis"}),", ",(0,r.jsx)(n.code,{children:"gogo"})," etc."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"naming-convention",children:"Naming Convention"}),"\n",(0,r.jsx)(n.h3,{id:"directory-structure-1",children:"Directory Structure"}),"\n",(0,r.jsxs)(n.p,{children:["The package name should be lower-case, consist with the project directory structure, e.g., ",(0,r.jsx)(n.code,{children:"my/package/v1/"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-protobuf",children:"package my.package.v1;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"file-structure",children:"File Structure"}),"\n",(0,r.jsxs)(n.p,{children:["The name of proto files should be ",(0,r.jsx)(n.code,{children:"lower_snake_case.proto"}),".\nThe contents of proto file should be ordered in the following manner:"]}),"\n",(0,r.jsxs)(n.ol,{children:["\n",(0,r.jsx)(n.li,{children:"License header (if applicable)"}),"\n",(0,r.jsx)(n.li,{children:"File overview"}),"\n",(0,r.jsx)(n.li,{children:"Syntax"}),"\n",(0,r.jsx)(n.li,{children:"Package"}),"\n",(0,r.jsx)(n.li,{children:"Imports (sorted)"}),"\n",(0,r.jsx)(n.li,{children:"File options"}),"\n",(0,r.jsx)(n.li,{children:"Everything else"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"message--field-naming",children:"Message & Field Naming"}),"\n",(0,r.jsxs)(n.p,{children:["Use CamelCase (with an initial capital) for message names, e.g., ",(0,r.jsx)(n.code,{children:"SongServerRequest"}),".",(0,r.jsx)(n.br,{}),"\n","Use underscore_separated_names for field names (including oneof field and extension names) , e.g., ",(0,r.jsx)(n.code,{children:"song_name"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-protobuf",children:"message SongServerRequest {\n  optional string song_name = 1;\n}\n"})}),"\n",(0,r.jsx)(n.p,{children:"Corresponding with the definitions which mentioned above, the generated code can be shown as follows."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{children:"C++:\n  const string& song_name() { ... }\n  void set_song_name(const string& x) { ... }\n\nJava:\n  public String getSongName() { ... }\n  public Builder setSongName(String v) { ... }\n"})}),"\n",(0,r.jsx)(n.h3,{id:"repeated-fields",children:"Repeated Fields"}),"\n",(0,r.jsx)(n.p,{children:"Use pluralized names for repeated fields."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-protobuf",children:"repeated string keys = 1;\n  ...\nrepeated MyMessage accounts = 17;\n"})}),"\n",(0,r.jsx)(n.h3,{id:"enums",children:"Enums"}),"\n",(0,r.jsxs)(n.p,{children:["Use CamelCase (with an initial capital) for enum type names and ",(0,r.jsx)(n.code,{children:"CAPITALS_WITH_UNDERSCORES"})," for value names:"]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-protobuf",children:"enum FooBar {\n  FOO_BAR_UNSPECIFIED = 0;\n  FOO_BAR_FIRST_VALUE = 1;\n  FOO_BAR_SECOND_VALUE = 2;\n}\n"})}),"\n",(0,r.jsxs)(n.p,{children:["Each enum value should end with a semicolon, not a comma. Prefer prefixing enum values instead of surrounding them in an enclosing message. The zero value enum should have the suffix ",(0,r.jsx)(n.code,{children:"UNSPECIFIED"}),"."]}),"\n",(0,r.jsx)(n.h3,{id:"services",children:"Services"}),"\n",(0,r.jsxs)(n.p,{children:["If your ",(0,r.jsx)(n.code,{children:".proto"})," defines an RPC service, you should use CamelCase (with an initial capital) for both the service name and any RPC method names."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-protobuf",children:"service FooService {\n  rpc GetSomething(GetSomethingRequest) returns (GetSomethingResponse);\n  rpc ListSomething(ListSomethingRequest) returns (ListSomethingResponse);\n}\n"})}),"\n",(0,r.jsx)(n.h2,{id:"comment",children:"Comment"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Service"})," describes the functions of this service."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Method"})," describe the functions of this API."]}),"\n",(0,r.jsxs)(n.li,{children:[(0,r.jsx)(n.strong,{children:"Field"})," describe the information of this field."]}),"\n"]}),"\n",(0,r.jsx)(n.h2,{id:"examples",children:"Examples"}),"\n",(0,r.jsx)(n.p,{children:"Service API Definition (demo.proto)"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-protobuf",children:'syntax = "proto3";\n\npackage kratos.demo.v1;\n\n// specifying the package names for importing from multiple programming language\noption go_package = "github.com/go-kratos/kratos/demo/v1;v1";   //the name after ; is for relative code generation\noption java_multiple_files = true;\noption java_package = "com.github.kratos.demo.v1";\noption objc_class_prefix = "KratosDemoV1";\n\n// Definition of the service\nservice Greeter {\n    // definition the function of API\n    rpc SayHello (HelloRequest) returns (HelloReply);\n}\n// the request of Hello\nmessage HelloRequest {\n    // user\'s name\n    string name = 1;\n}\n// the response of Hello\nmessage HelloReply {\n    // result data\n    string message = 1;\n}\n'})}),"\n",(0,r.jsx)(n.h2,{id:"references",children:"References"}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://google.aip.dev/",children:"https://google.aip.dev/"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://protobuf.dev/programming-guides/style/",children:"https://protobuf.dev/programming-guides/style/"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://protobuf.dev/programming-guides/proto3/",children:"https://protobuf.dev/programming-guides/proto3/"})}),"\n",(0,r.jsx)(n.li,{children:(0,r.jsx)(n.a,{href:"https://colobu.com/2017/03/16/Protobuf3-language-guide/",children:"https://colobu.com/2017/03/16/Protobuf3-language-guide/"})}),"\n"]})]})}function h(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>t,x:()=>a});var o=i(6540);const r={},s=o.createContext(r);function t(e){const n=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:t(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);