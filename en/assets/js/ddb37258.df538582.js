"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2878],{4432:(r,e,n)=>{n.r(e),n.d(e,{assets:()=>c,contentTitle:()=>i,default:()=>p,frontMatter:()=>a,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"component/errors","title":"Errors","description":"You can define errors in protos and generate enums with protoc-gen-go.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/component/04-errors.md","sourceDirName":"component","slug":"/component/errors","permalink":"/en/docs/component/errors","draft":false,"unlisted":false,"editUrl":"https://github.com/go-kratos/go-kratos.dev/edit/main/i18n/en/docusaurus-plugin-content-docs/current/component/04-errors.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{"id":"errors","title":"Errors"},"sidebar":"docs","previous":{"title":"Encoding","permalink":"/en/docs/component/encoding"},"next":{"title":"Logger","permalink":"/en/docs/component/log"}}');var t=n(4848),s=n(8453);const a={id:"errors",title:"Errors"},i=void 0,c={},l=[{value:"Installation",id:"installation",level:3},{value:"Error Defination",id:"error-defination",level:3},{value:"Error Generation",id:"error-generation",level:3},{value:"Usage",id:"usage",level:3}];function d(r){const e={code:"code",h3:"h3",p:"p",pre:"pre",...(0,s.R)(),...r.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(e.p,{children:"You can define errors in protos and generate enums with protoc-gen-go."}),"\n",(0,t.jsx)(e.p,{children:"Error in errors pacakge implements GRPCStatus() interface,The conversion between grpc and HTTP error code is realized, and the business reason is returned through errorinfo."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-json",children:'{\n    // The error code is consistent with HTTP status and can be converted into grpc status in grpc.\n    "code": 500,\n    // The error reason is defined as the business judgment error code.\n    "reason": "USER_NOT_FOUND",\n    // Error information is user-readable information and can be used as user prompt content.\n    "message": "invalid argument error",\n    // Error meta information, add additional extensible information for the error.\n    "metadata": {\n      "foo": "bar"\n    }\n}\n'})}),"\n",(0,t.jsx)(e.h3,{id:"installation",children:"Installation"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"go install github.com/go-kratos/kratos/cmd/protoc-gen-go-errors/v2\n"})}),"\n",(0,t.jsx)(e.h3,{id:"error-defination",children:"Error Defination"}),"\n",(0,t.jsx)(e.p,{children:"api/helloworld/v1/helloworld.proto"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-protobuf",children:'syntax = "proto3";\n\npackage api.kratos.v1;\nimport "errors/errors.proto";\n\n// Define the package name for source code reference.\noption go_package = "kratos/api/helloworld;helloworld";\noption java_multiple_files = true;\noption java_package = "api.helloworld";\n\nenum ErrorReason {\n  // Set default error code.\n  option (errors.default_code) = 500;\n\n  // Set the error code separately for an enumeration.\n  USER_NOT_FOUND = 0 [(errors.code) = 404];\n\n  CONTENT_MISSING = 1 [(errors.code) = 400];\n}\n'})}),"\n",(0,t.jsx)(e.h3,{id:"error-generation",children:"Error Generation"}),"\n",(0,t.jsx)(e.p,{children:"To generate code with protoc."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-bash",children:"protoc --proto_path=. \\\n         --proto_path=./third_party \\\n         --go_out=paths=source_relative:. \\\n         --go-errors_out=paths=source_relative:. \\\n         $(API_PROTO_FILES)\n"})}),"\n",(0,t.jsx)(e.p,{children:"Or use the makefile directive at the root of the project"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{children:"make errors\n"})}),"\n",(0,t.jsx)(e.p,{children:"After successful execution, will be generated in the api/helloworld directory a go file,The code is as follows."}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-go",children:'package helloworld\n\nimport (\n\tfmt "fmt"\n\terrors "github.com/go-kratos/kratos/v2/errors"\n)\n\n// This is a compile-time assertion to ensure that this generated file\n// is compatible with the kratos package it is being compiled against.\nconst _ = errors.SupportPackageIsVersion1\n\nfunc IsUserNotFound(err error) bool {\n\tif err == nil {\n\t\treturn false\n\t}\n\te := errors.FromError(err)\n\treturn e.Reason == ErrorReason_USER_NOT_FOUND.String() && e.Code == 404\n}\n\nfunc ErrorUserNotFound(format string, args ...interface{}) *errors.Error {\n\treturn errors.New(404, ErrorReason_USER_NOT_FOUND.String(), fmt.Sprintf(format, args...))\n}\n\nfunc IsContentMissing(err error) bool {\n\tif err == nil {\n\t\treturn false\n\t}\n\te := errors.FromError(err)\n\treturn e.Reason == ErrorReason_CONTENT_MISSING.String() && e.Code == 400\n}\n\nfunc ErrorContentMissing(format string, args ...interface{}) *errors.Error {\n\treturn errors.New(400, ErrorReason_CONTENT_MISSING.String(), fmt.Sprintf(format, args...))\n}\n'})}),"\n",(0,t.jsx)(e.h3,{id:"usage",children:"Usage"}),"\n",(0,t.jsx)(e.pre,{children:(0,t.jsx)(e.code,{className:"language-go",children:'import "kratos/api/helloworld"\n\nerr := wrong()\n\nif errors.Is(err,errors.BadRequest("USER_NAME_EMPTY","")) {\n// do something\n}\n\ne := errors.FromError(err)\nif  e.Reason == "USER_NAME_EMPTY" && e.Code == 500 {\n// do something\n}\n\nif helloworld.IsUserNotFound(err) {\n// do something\n})\n'})})]})}function p(r={}){const{wrapper:e}={...(0,s.R)(),...r.components};return e?(0,t.jsx)(e,{...r,children:(0,t.jsx)(d,{...r})}):d(r)}},8453:(r,e,n)=>{n.d(e,{R:()=>a,x:()=>i});var o=n(6540);const t={},s=o.createContext(t);function a(r){const e=o.useContext(s);return o.useMemo(function(){return"function"==typeof r?r(e):{...e,...r}},[e,r])}function i(r){let e;return e=r.disableParentContext?"function"==typeof r.components?r.components(t):r.components||t:a(r.components),o.createElement(s.Provider,{value:e},r.children)}}}]);