"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[1648],{72:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>a,contentTitle:()=>o,default:()=>d,frontMatter:()=>c,metadata:()=>t,toc:()=>l});const t=JSON.parse('{"id":"component/registry","title":"Registry","description":"Interface","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/component/08-registry.md","sourceDirName":"component","slug":"/component/registry","permalink":"/en/docs/component/registry","draft":false,"unlisted":false,"editUrl":"https://github.com/go-kratos/go-kratos.dev/edit/main/i18n/en/docusaurus-plugin-content-docs/current/component/08-registry.md","tags":[],"version":"current","sidebarPosition":8,"frontMatter":{"id":"registry","title":"Registry"},"sidebar":"docs","previous":{"title":"Metrics","permalink":"/en/docs/component/metrics"},"next":{"title":"Routing and Load Balancing","permalink":"/en/docs/component/selector"}}');var i=r(4848),s=r(8453);const c={id:"registry",title:"Registry"},o=void 0,a={},l=[{value:"Interface",id:"interface",level:3},{value:"Usage",id:"usage",level:3},{value:"Register a Service",id:"register-a-service",level:4},{value:"Service Discovery (gRPC)",id:"service-discovery-grpc",level:4}];function g(e){const n={a:"a",code:"code",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h3,{id:"interface",children:"Interface"}),"\n",(0,i.jsx)(n.p,{children:"Registry has two interface, the Registrar is for services' register and deregister, the Discovery is for fetching the list of services."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"type Registrar interface {\n\t// register the service\n\tRegister(ctx context.Context, service *ServiceInstance) error\n\t// deregister the service\n\tDeregister(ctx context.Context, service *ServiceInstance) error\n}\n"})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"type Discovery interface {\n\t// fetch the service list of serviceName\n\tFetch(ctx context.Context, serviceName string) ([]*ServiceInstance, error)\n\t// subscribe to a list of serviceName\n\tWatch(ctx context.Context, serviceName string) (Watcher, error)\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Implementations:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/go-kratos/kratos/tree/main/contrib/registry/consul",children:"consul"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/go-kratos/kratos/tree/main/contrib/registry/discovery",children:"discovery"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/go-kratos/kratos/tree/main/contrib/registry/etcd",children:"etcd"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/go-kratos/kratos/tree/main/contrib/registry/kubernetes",children:"kubernetes"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/go-kratos/kratos/tree/main/contrib/registry/nacos",children:"nacos"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/go-kratos/kratos/tree/main/contrib/registry/polaris",children:"polaris"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://github.com/go-kratos/kratos/tree/main/contrib/registry/zookeeper",children:"zookeeper"})}),"\n"]}),"\n",(0,i.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,i.jsx)(n.h4,{id:"register-a-service",children:"Register a Service"}),"\n",(0,i.jsx)(n.p,{children:"Create a Registrar(e.g. consul) and inject it to Kratos applications. Then the framework will do register and deregister automatically."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'import (\n    consul "github.com/go-kratos/consul/registry"\n    "github.com/hashicorp/consul/api"\n)\n\n// new consul client\nclient, err := api.NewClient(api.DefaultConfig())\nif err != nil {\n\tpanic(err)\n}\n// new reg with consul client\nreg := consul.New(client)\n\napp := kratos.New(\n    // service-name\n    kratos.Name(Name),\n    kratos.Version(Version),\n    kratos.Metadata(map[string]string{}),\n    kratos.Logger(logger),\n    kratos.Server(\n        hs,\n        gs,\n    ),\n    // with registrar\n    kratos.Registrar(reg),\n)\n'})}),"\n",(0,i.jsx)(n.p,{children:"If use etcd or any other implementations, you can create a Registrar with other client."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'import (\n    "github.com/go-kratos/kratos/contrib/registry/etcd/v2"\n    clientv3 "go.etcd.io/etcd/client/v3"\n)\n\n// new etcd client\nclient, err := clientv3.New(clientv3.Config{\n    Endpoints: []string{"127.0.0.1:2379"},\n})\nif err != nil {\n    panic(err)\n}\n// new reg with etcd client\nreg := etcd.New(client)\n\napp := kratos.New(\n    // service-name\n    kratos.Name(Name),\n    kratos.Version(Version),\n    kratos.Metadata(map[string]string{}),\n    kratos.Logger(logger),\n    kratos.Server(\n        hs,\n        gs,\n    ),\n    // with registrar\n    kratos.Registrar(reg),\n)\n'})}),"\n",(0,i.jsx)(n.h4,{id:"service-discovery-grpc",children:"Service Discovery (gRPC)"}),"\n",(0,i.jsxs)(n.p,{children:["Create a Registrar(e.g. consul), create an Endpoint with url format as ",(0,i.jsx)(n.code,{children:"<schema>://[authority]/<service-name>"}),", then use ",(0,i.jsx)(n.code,{children:"grc.WithDiscovery"})," and ",(0,i.jsx)(n.code,{children:"grpc.WithEndpoint"})," as the options of the Dial method to get the gRPC connection."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'import (\n    "context"\n\n    consul "github.com/go-kratos/consul/registry"\n    "github.com/go-kratos/kratos/v2/transport/grpc"\n    "github.com/hashicorp/consul/api"\n)\n\n// new consul client\nclient, err := api.NewClient(api.DefaultConfig())\nif err != nil {\n\tpanic(err)\n}\n// new dis with consul client\ndis := consul.New(client)\n\nendpoint := "discovery:///provider"\nconn, err := grpc.Dial(context.Background(), grpc.WithEndpoint(endpoint), grpc.WithDiscovery(dis))\nif err != nil {\n    panic(err)\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"It is the same as Register, if use etcd or any other implementations, you can create a Discovery with other client."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'import (\n    "github.com/go-kratos/kratos/contrib/registry/etcd/v2"\n    "github.com/go-kratos/kratos/v2/transport/grpc"\n    clientv3 "go.etcd.io/etcd/client/v3"\n)\n\n// new etcd client\nclient, err := clientv3.New(clientv3.Config{\n    Endpoints: []string{"127.0.0.1:2379"},\n})\nif err != nil {\n    panic(err)\n}\n// new dis with etcd client\ndis := etcd.New(client)\n\n// This Dial need to use DialInsecure() or use grpc.WithTransportCredentials in Dial option\nendpoint := "discovery:///provider"\nconn, err := grpc.Dial(context.Background(), grpc.WithEndpoint(endpoint), grpc.WithDiscovery(dis))\nif err != nil {\n    panic(err)\n}\n'})})]})}function d(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(g,{...e})}):g(e)}},8453:(e,n,r)=>{r.d(n,{R:()=>c,x:()=>o});var t=r(6540);const i={},s=t.createContext(i);function c(e){const n=t.useContext(s);return t.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:c(e.components),t.createElement(s.Provider,{value:n},e.children)}}}]);