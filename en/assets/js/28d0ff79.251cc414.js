"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[4429],{3905:function(e,t,r){r.d(t,{Zo:function(){return u},kt:function(){return d}});var n=r(7294);function i(e,t,r){return t in e?Object.defineProperty(e,t,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[t]=r,e}function o(e,t){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);t&&(n=n.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),r.push.apply(r,n)}return r}function s(e){for(var t=1;t<arguments.length;t++){var r=null!=arguments[t]?arguments[t]:{};t%2?o(Object(r),!0).forEach((function(t){i(e,t,r[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(r,t))}))}return e}function c(e,t){if(null==e)return{};var r,n,i=function(e,t){if(null==e)return{};var r,n,i={},o=Object.keys(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||(i[r]=e[r]);return i}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(n=0;n<o.length;n++)r=o[n],t.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(i[r]=e[r])}return i}var a=n.createContext({}),m=function(e){var t=n.useContext(a),r=t;return e&&(r="function"==typeof e?e(t):s(s({},t),e)),r},u=function(e){var t=m(e.components);return n.createElement(a.Provider,{value:t},e.children)},l={inlineCode:"code",wrapper:function(e){var t=e.children;return n.createElement(n.Fragment,{},t)}},p=n.forwardRef((function(e,t){var r=e.components,i=e.mdxType,o=e.originalType,a=e.parentName,u=c(e,["components","mdxType","originalType","parentName"]),p=m(r),d=i,g=p["".concat(a,".").concat(d)]||p[d]||l[d]||o;return r?n.createElement(g,s(s({ref:t},u),{},{components:r})):n.createElement(g,s({ref:t},u))}));function d(e,t){var r=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var o=r.length,s=new Array(o);s[0]=p;var c={};for(var a in t)hasOwnProperty.call(t,a)&&(c[a]=t[a]);c.originalType=e,c.mdxType="string"==typeof e?e:i,s[1]=c;for(var m=2;m<o;m++)s[m]=r[m];return n.createElement.apply(null,s)}return n.createElement.apply(null,r)}p.displayName="MDXCreateElement"},5845:function(e,t,r){r.r(t),r.d(t,{assets:function(){return a},contentTitle:function(){return s},default:function(){return l},frontMatter:function(){return o},metadata:function(){return c},toc:function(){return m}});var n=r(3117),i=(r(7294),r(3905));const o={id:"metrics",title:"Metrics",keywords:["Go","Kratos","Toolkit","Framework","Microservices","Protobuf","gRPC","HTTP"]},s=void 0,c={unversionedId:"component/middleware/metrics",id:"component/middleware/metrics",title:"Metrics",description:"Metrics middleware is used to monitor performance metrics for services, counting request time and request counts.",source:"@site/i18n/en/docusaurus-plugin-content-docs/current/component/middleware/05-metrics.md",sourceDirName:"component/middleware",slug:"/component/middleware/metrics",permalink:"/en/docs/component/middleware/metrics",draft:!1,editUrl:"https://github.com/go-kratos/go-kratos.dev/edit/main/i18n/en/docusaurus-plugin-content-docs/current/component/middleware/05-metrics.md",tags:[],version:"current",sidebarPosition:5,frontMatter:{id:"metrics",title:"Metrics",keywords:["Go","Kratos","Toolkit","Framework","Microservices","Protobuf","gRPC","HTTP"]},sidebar:"docs",previous:{title:"Logging",permalink:"/en/docs/component/middleware/logging"},next:{title:"Rate Limiter",permalink:"/en/docs/component/middleware/ratelimit"}},a={},m=[{value:"Configuration",id:"configuration",level:3},{value:"<code>WithSeconds()</code>",id:"withseconds",level:4},{value:"<code>WithRequests()</code>",id:"withrequests",level:4},{value:"Usage (kratos &lt; 2.8.0)",id:"usage-kratos--280",level:3},{value:"Prometheus",id:"prometheus",level:4},{value:"To configure metrics in servers",id:"to-configure-metrics-in-servers",level:4},{value:"To configure metrics in clients",id:"to-configure-metrics-in-clients",level:4},{value:"Usage (kratos &gt;= 2.8.0)",id:"usage-kratos--280-1",level:3},{value:"Prometheus",id:"prometheus-1",level:4},{value:"To configure metrics in servers",id:"to-configure-metrics-in-servers-1",level:4},{value:"To configure metrics in clients",id:"to-configure-metrics-in-clients-1",level:4},{value:"References",id:"references",level:3}],u={toc:m};function l(e){let{components:t,...r}=e;return(0,i.kt)("wrapper",(0,n.Z)({},u,r,{components:t,mdxType:"MDXLayout"}),(0,i.kt)("p",null,"Metrics middleware is used to monitor performance metrics for services, counting request time and request counts."),(0,i.kt)("h3",{id:"configuration"},"Configuration"),(0,i.kt)("p",null,"Two configuration methods are available in metrics middleware ",(0,i.kt)("inlineCode",{parentName:"p"},"WithSeconds()")," and ",(0,i.kt)("inlineCode",{parentName:"p"},"WithRequests()"),"\u3002"),(0,i.kt)("h4",{id:"withseconds"},(0,i.kt)("inlineCode",{parentName:"h4"},"WithSeconds()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"func WithSeconds(c metrics.Observer) Option {\n    return func(o *options) {\n        o.seconds = c\n    }\n}\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Observer")," histogram used to set up the metrics middleware statistics request."),(0,i.kt)("h4",{id:"withrequests"},(0,i.kt)("inlineCode",{parentName:"h4"},"WithRequests()")),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},"func WithRequests(c metrics.Counter) Option {\n    return func(o *options) {\n        o.requests = c\n    }\n}\n")),(0,i.kt)("p",null,"The ",(0,i.kt)("inlineCode",{parentName:"p"},"Counter")," counter used to set the metrics middleware statistics request count."),(0,i.kt)("h3",{id:"usage-kratos--280"},"Usage (kratos < 2.8.0)"),(0,i.kt)("h4",{id:"prometheus"},"Prometheus"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'// Detailed reference https://github.com/go-kratos/examples/tree/main/metrics\n\n_metricSeconds = prometheus.NewHistogramVec(prometheus.HistogramOpts{\n    Namespace: "server",\n    Subsystem: "requests",\n    Name:      "duration_sec",\n    Help:      "server requests duratio(sec).",\n    Buckets:   []float64{0.005, 0.01, 0.025, 0.05, 0.1, 0.250, 0.5, 1},\n}, []string{"kind", "operation"})\n\n_metricRequests = prometheus.NewCounterVec(prometheus.CounterOpts{\n    Namespace: "client",\n    Subsystem: "requests",\n    Name:      "code_total",\n    Help:      "The total number of processed requests",\n}, []string{"kind", "operation", "code", "reason"})\n    \nprometheus.MustRegister(_metricSeconds, _metricRequests)\n')),(0,i.kt)("h4",{id:"to-configure-metrics-in-servers"},"To configure metrics in servers"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'import (\n    prom "github.com/go-kratos/kratos/contrib/metrics/prometheus/v2"\n)\n\n// grpc service\ngrpcSrv := grpc.NewServer(\n    grpc.Address(":9000"),\n    grpc.Middleware(\n        metrics.Server(\n            metrics.WithSeconds(prom.NewHistogram(_metricSeconds)),\n            metrics.WithRequests(prom.NewCounter(_metricRequests)),\n        ),\n    ),\n)\n\n// http service\nhttpSrv := http.NewServer(\n    http.Address(":8000"),\n    http.Middleware(\n        metrics.Server(\n            metrics.WithSeconds(prom.NewHistogram(_metricSeconds)),\n            metrics.WithRequests(prom.NewCounter(_metricRequests)),\n        ),\n    ),\n)\nhttpSrv.Handle("/metrics", promhttp.Handler())\n')),(0,i.kt)("h4",{id:"to-configure-metrics-in-clients"},"To configure metrics in clients"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'// grpc client\nconn, err := grpc.DialInsecure(\n    context.Background(),\n    grpc.WithEndpoint("127.0.0.1:9000"),\n    grpc.WithMiddleware(\n        metrics.Client(\n            metrics.WithSeconds(prom.NewHistogram(_metricSeconds)),\n            metrics.WithRequests(prom.NewCounter(_metricRequests)),\n        ),\n    ),\n)\n\n// http client\nconn, err := http.NewClient(\n    context.Background(),\n    http.WithEndpoint("127.0.0.1:8000"),\n    http.WithMiddleware(\n        metrics.Client(\n            metrics.WithSeconds(prom.NewHistogram(_metricSeconds)),\n            metrics.WithRequests(prom.NewCounter(_metricRequests)),\n        ),\n    ),\n)\n')),(0,i.kt)("h3",{id:"usage-kratos--280-1"},"Usage (kratos >= 2.8.0)"),(0,i.kt)("p",null,"Since version ",(0,i.kt)("a",{parentName:"p",href:"https://github.com/go-kratos/kratos/releases/tag/v2.8.0"},"v2.8.0"),", kratos uses otel.Metrics. Way to export metrics to prometheus is as follows:"),(0,i.kt)("h4",{id:"prometheus-1"},"Prometheus"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'import (\n    "github.com/go-kratos/kratos/v2/middleware/metrics"\n    "go.opentelemetry.io/otel/exporters/prometheus"\n    "go.opentelemetry.io/otel/metric"\n    sdkmetric "go.opentelemetry.io/otel/sdk/metric"\n)\n\n// Detailed reference https://github.com/go-kratos/examples/tree/main/metrics\nfunc init() {\n    exporter, err := prometheus.New()\n    if err != nil {\n        panic(err)\n    }\n    provider := sdkmetric.NewMeterProvider(sdkmetric.WithReader(exporter))\n    meter := provider.Meter(Name)\n\n    _metricRequests, err = metrics.DefaultRequestsCounter(meter, metrics.DefaultServerRequestsCounterName)\n    if err != nil {\n        panic(err)\n    }\n\n    _metricSeconds, err = metrics.DefaultSecondsHistogram(meter, metrics.DefaultServerSecondsHistogramName)\n    if err != nil {\n        panic(err)\n    }\n}\n')),(0,i.kt)("h4",{id:"to-configure-metrics-in-servers-1"},"To configure metrics in servers"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'import (\n    "github.com/prometheus/client_golang/prometheus/promhttp"\n)\n\n// grpc service\ngrpcSrv := grpc.NewServer(\n    grpc.Address(":9000"),\n    grpc.Middleware(\n        metrics.Server(\n            metrics.WithSeconds(_metricSeconds),\n            metrics.WithRequests(_metricRequests),\n        ),\n    ),\n)\n\n// http service\nhttpSrv := http.NewServer(\n    http.Address(":8000"),\n    http.Middleware(\n        metrics.Server(\n            metrics.WithSeconds(_metricSeconds),\n            metrics.WithRequests(_metricRequests),\n        ),\n    ),\n)\nhttpSrv.Handle("/metrics", promhttp.Handler())\n')),(0,i.kt)("h4",{id:"to-configure-metrics-in-clients-1"},"To configure metrics in clients"),(0,i.kt)("pre",null,(0,i.kt)("code",{parentName:"pre",className:"language-go"},'// grpc client\nconn, err := grpc.DialInsecure(\n    context.Background(),\n    grpc.WithEndpoint("127.0.0.1:9000"),\n    grpc.WithMiddleware(\n        metrics.Client(\n            metrics.WithSeconds(_metricSeconds),\n            metrics.WithRequests(_metricRequests),\n        ),\n    ),\n)\n\n// http client\nconn, err := http.NewClient(\n    context.Background(),\n    http.WithEndpoint("127.0.0.1:8000"),\n    http.WithMiddleware(\n        metrics.Client(\n            metrics.WithSeconds(_metricSeconds),\n            metrics.WithRequests(_metricRequests),\n        ),\n    ),\n)\n')),(0,i.kt)("h3",{id:"references"},"References"),(0,i.kt)("ul",null,(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://prometheus.io/docs/concepts/metric_types/"},"https://prometheus.io/docs/concepts/metric_types/")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://github.com/go-kratos/examples/tree/main/metrics"},"https://github.com/go-kratos/examples/tree/main/metrics")),(0,i.kt)("li",{parentName:"ul"},(0,i.kt)("a",{parentName:"li",href:"https://pkg.go.dev/go.opentelemetry.io/otel/exporters/prometheus"},"https://pkg.go.dev/go.opentelemetry.io/otel/exporters/prometheus"))))}l.isMDXComponent=!0}}]);