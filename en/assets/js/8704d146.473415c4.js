"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[2275],{6228:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>a,default:()=>u,frontMatter:()=>i,metadata:()=>o,toc:()=>l});const o=JSON.parse('{"id":"component/encoding","title":"Encoding","description":"We\'ve abstracted the Codec interface to unify the serialization/deserialization logic for processing requests, and you can implement your own Codec to support more formats. The specific source code is in encoding\u3002","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/component/03-encoding.md","sourceDirName":"component","slug":"/component/encoding","permalink":"/en/docs/component/encoding","draft":false,"unlisted":false,"editUrl":"https://github.com/go-kratos/go-kratos.dev/edit/main/i18n/en/docusaurus-plugin-content-docs/current/component/03-encoding.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"encoding","title":"Encoding","keywords":["Go","Kratos","Toolkit","Framework","Microservices","Protobuf","gRPC","HTTP"]},"sidebar":"docs","previous":{"title":"Configuration","permalink":"/en/docs/component/config"},"next":{"title":"Errors","permalink":"/en/docs/component/errors"}}');var r=t(4848),s=t(8453);const i={id:"encoding",title:"Encoding",keywords:["Go","Kratos","Toolkit","Framework","Microservices","Protobuf","gRPC","HTTP"]},a=void 0,c={},l=[{value:"Interface",id:"interface",level:3},{value:"Example of Codec Implementation",id:"example-of-codec-implementation",level:3},{value:"Usage",id:"usage",level:3},{value:"Register Custom Codec",id:"register-custom-codec",level:4},{value:"Get the Codec",id:"get-the-codec",level:4},{value:"Serialization",id:"serialization",level:4},{value:"Deserialization",id:"deserialization",level:4}];function d(e){const n={a:"a",code:"code",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,s.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsxs)(n.p,{children:["We've abstracted the ",(0,r.jsx)(n.code,{children:"Codec"})," interface to unify the serialization/deserialization logic for processing requests, and you can implement your own Codec to support more formats. The specific source code is in ",(0,r.jsx)(n.a,{href:"https://github.com/go-kratos/kratos/tree/main/encoding",children:"encoding"}),"\u3002"]}),"\n",(0,r.jsx)(n.p,{children:"These formats are battery-included."}),"\n",(0,r.jsxs)(n.ul,{children:["\n",(0,r.jsx)(n.li,{children:"form"}),"\n",(0,r.jsx)(n.li,{children:"json"}),"\n",(0,r.jsx)(n.li,{children:"protobuf"}),"\n",(0,r.jsx)(n.li,{children:"xml"}),"\n",(0,r.jsx)(n.li,{children:"yaml"}),"\n"]}),"\n",(0,r.jsx)(n.h3,{id:"interface",children:"Interface"}),"\n",(0,r.jsx)(n.p,{children:"You should implement the following Codec interface for your custom codec."}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"// Codec interface is for serialization and deserialization, notice that these methods must be thread-safe.\ntype Codec interface {\n\tMarshal(v interface{}) ([]byte, error)\n\tUnmarshal(data []byte, v interface{}) error\n\tName() string\n}\n"})}),"\n",(0,r.jsx)(n.h3,{id:"example-of-codec-implementation",children:"Example of Codec Implementation"}),"\n",(0,r.jsxs)(n.p,{children:["You may refer to the included implementations in kratos, such as ",(0,r.jsx)(n.code,{children:"json"})," when you implementing custom ",(0,r.jsx)(n.code,{children:"Codec"}),"."]}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'// https://github.com/go-kratos/kratos/blob/main/encoding/json/json.go\npackage json\n\nimport (\n\t"encoding/json"\n\t"reflect"\n\n\t"github.com/go-kratos/kratos/v2/encoding"\n\t"google.golang.org/protobuf/encoding/protojson"\n\t"google.golang.org/protobuf/proto"\n)\n\n// Name is the name registered for the json codec.\nconst Name = "json"\n\nvar (\n\t// MarshalOptions is a configurable JSON format marshaller.\n\tMarshalOptions = protojson.MarshalOptions{\n\t\tEmitUnpopulated: true,\n\t}\n\t// UnmarshalOptions is a configurable JSON format parser.\n\tUnmarshalOptions = protojson.UnmarshalOptions{\n\t\tDiscardUnknown: true,\n\t}\n)\n\nfunc init() {\n\tencoding.RegisterCodec(codec{})\n}\n\n// codec is a Codec implementation with json.\ntype codec struct{}\n\nfunc (codec) Marshal(v interface{}) ([]byte, error) {\n\tswitch m := v.(type) {\n\tcase json.Marshaler:\n\t\treturn m.MarshalJSON()\n\tcase proto.Message:\n\t\treturn MarshalOptions.Marshal(m)\n\tdefault:\n\t\treturn json.Marshal(m)\n\t}\n}\n\nfunc (codec) Unmarshal(data []byte, v interface{}) error {\n\tswitch m := v.(type) {\n\tcase json.Unmarshaler:\n\t\treturn m.UnmarshalJSON(data)\n\tcase proto.Message:\n\t\treturn UnmarshalOptions.Unmarshal(data, m)\n\tdefault:\n\t\trv := reflect.ValueOf(v)\n\t\tfor rv := rv; rv.Kind() == reflect.Ptr; {\n\t\t\tif rv.IsNil() {\n\t\t\t\trv.Set(reflect.New(rv.Type().Elem()))\n\t\t\t}\n\t\t\trv = rv.Elem()\n\t\t}\n\t\tif m, ok := reflect.Indirect(rv).Interface().(proto.Message); ok {\n\t\t\treturn UnmarshalOptions.Unmarshal(data, m)\n\t\t}\n\t\treturn json.Unmarshal(data, m)\n\t}\n}\n\nfunc (codec) Name() string {\n\treturn Name\n}\n'})}),"\n",(0,r.jsx)(n.h3,{id:"usage",children:"Usage"}),"\n",(0,r.jsx)(n.h4,{id:"register-custom-codec",children:"Register Custom Codec"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:"encoding.RegisterCodec(codec{})\n"})}),"\n",(0,r.jsx)(n.h4,{id:"get-the-codec",children:"Get the Codec"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'jsonCodec := encoding.GetCodec("json")\n'})}),"\n",(0,r.jsx)(n.h4,{id:"serialization",children:"Serialization"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'// You should manually import this package if you use it directly: import _ "github.com/go-kratos/kratos/v2/encoding/json"\njsonCodec := encoding.GetCodec("json")\ntype user struct {\n\tName string\n\tAge string\n\tstate bool\n}\nu := &user{\n\tName:  "kratos",\n\tAge:   "2",\n\tstate: false,\n}\nbytes, _ := jsonCodec.Marshal(u)\nfmt.Println(string(bytes))\n// output {"Name":"kratos","Age":"2"}\n'})}),"\n",(0,r.jsx)(n.h4,{id:"deserialization",children:"Deserialization"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-go",children:'// You should manually import this package if you use it directly:import _ "github.com/go-kratos/kratos/v2/encoding/json"\njsonCodec := encoding.GetCodec("json")\ntype user struct {\n\tName string\n\tAge string\n\tstate bool\n}\nu := &user{}\njsonCodec.Unmarshal([]byte(`{"Name":"kratos","Age":"2"}`), &u)\nfmt.Println(*u)\n//output &{kratos 2 false}\n'})})]})}function u(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var o=t(6540);const r={},s=o.createContext(r);function i(e){const n=o.useContext(s);return o.useMemo(function(){return"function"==typeof e?e(n):{...n,...e}},[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:i(e.components),o.createElement(s.Provider,{value:n},e.children)}}}]);