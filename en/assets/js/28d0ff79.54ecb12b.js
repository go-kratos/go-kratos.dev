"use strict";(self.webpackChunkdocs=self.webpackChunkdocs||[]).push([[813],{5255:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>d,contentTitle:()=>c,default:()=>a,frontMatter:()=>o,metadata:()=>n,toc:()=>m});const n=JSON.parse('{"id":"component/middleware/metrics","title":"Metrics","description":"Metrics middleware is used to monitor performance metrics for services, counting request time and request counts.","source":"@site/i18n/en/docusaurus-plugin-content-docs/current/component/middleware/05-metrics.md","sourceDirName":"component/middleware","slug":"/component/middleware/metrics","permalink":"/en/docs/component/middleware/metrics","draft":false,"unlisted":false,"editUrl":"https://github.com/go-kratos/go-kratos.dev/edit/main/i18n/en/docusaurus-plugin-content-docs/current/component/middleware/05-metrics.md","tags":[],"version":"current","sidebarPosition":5,"frontMatter":{"id":"metrics","title":"Metrics","keywords":["Go","Kratos","Toolkit","Framework","Microservices","Protobuf","gRPC","HTTP"]},"sidebar":"docs","previous":{"title":"Logging","permalink":"/en/docs/component/middleware/logging"},"next":{"title":"Rate Limiter","permalink":"/en/docs/component/middleware/ratelimit"}}');var s=r(4848),i=r(8453);const o={id:"metrics",title:"Metrics",keywords:["Go","Kratos","Toolkit","Framework","Microservices","Protobuf","gRPC","HTTP"]},c=void 0,d={},m=[{value:"Configuration",id:"configuration",level:3},{value:"<code>WithSeconds()</code>",id:"withseconds",level:4},{value:"<code>WithRequests()</code>",id:"withrequests",level:4},{value:"Usage (kratos &lt; 2.8.0)",id:"usage-kratos--280",level:3},{value:"Prometheus",id:"prometheus",level:4},{value:"To configure metrics in servers",id:"to-configure-metrics-in-servers",level:4},{value:"To configure metrics in clients",id:"to-configure-metrics-in-clients",level:4},{value:"Usage (kratos &gt;= 2.8.0)",id:"usage-kratos--280-1",level:3},{value:"Prometheus",id:"prometheus-1",level:4},{value:"To configure metrics in servers",id:"to-configure-metrics-in-servers-1",level:4},{value:"To configure metrics in clients",id:"to-configure-metrics-in-clients-1",level:4},{value:"References",id:"references",level:3}];function l(e){const t={a:"a",code:"code",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"Metrics middleware is used to monitor performance metrics for services, counting request time and request counts."}),"\n",(0,s.jsx)(t.h3,{id:"configuration",children:"Configuration"}),"\n",(0,s.jsxs)(t.p,{children:["Two configuration methods are available in metrics middleware ",(0,s.jsx)(t.code,{children:"WithSeconds()"})," and ",(0,s.jsx)(t.code,{children:"WithRequests()"}),"\u3002"]}),"\n",(0,s.jsx)(t.h4,{id:"withseconds",children:(0,s.jsx)(t.code,{children:"WithSeconds()"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-go",children:"func WithSeconds(c metrics.Observer) Option {\n\treturn func(o *options) {\n\t\to.seconds = c\n\t}\n}\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"Observer"})," histogram used to set up the metrics middleware statistics request."]}),"\n",(0,s.jsx)(t.h4,{id:"withrequests",children:(0,s.jsx)(t.code,{children:"WithRequests()"})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-go",children:"func WithRequests(c metrics.Counter) Option {\n\treturn func(o *options) {\n\t\to.requests = c\n\t}\n}\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"Counter"})," counter used to set the metrics middleware statistics request count."]}),"\n",(0,s.jsx)(t.h3,{id:"usage-kratos--280",children:"Usage (kratos < 2.8.0)"}),"\n",(0,s.jsx)(t.h4,{id:"prometheus",children:"Prometheus"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-go",children:'// Detailed reference https://github.com/go-kratos/examples/tree/main/metrics\n\n_metricSeconds = prometheus.NewHistogramVec(prometheus.HistogramOpts{\n\tNamespace: "server",\n\tSubsystem: "requests",\n\tName:      "duration_sec",\n\tHelp:      "server requests duratio(sec).",\n\tBuckets:   []float64{0.005, 0.01, 0.025, 0.05, 0.1, 0.250, 0.5, 1},\n}, []string{"kind", "operation"})\n\n_metricRequests = prometheus.NewCounterVec(prometheus.CounterOpts{\n\tNamespace: "client",\n\tSubsystem: "requests",\n\tName:      "code_total",\n\tHelp:      "The total number of processed requests",\n}, []string{"kind", "operation", "code", "reason"})\n\t\nprometheus.MustRegister(_metricSeconds, _metricRequests)\n'})}),"\n",(0,s.jsx)(t.h4,{id:"to-configure-metrics-in-servers",children:"To configure metrics in servers"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-go",children:'import (\n\tprom "github.com/go-kratos/kratos/contrib/metrics/prometheus/v2"\n)\n\n// grpc service\ngrpcSrv := grpc.NewServer(\n\tgrpc.Address(":9000"),\n\tgrpc.Middleware(\n\t\tmetrics.Server(\n\t\t\tmetrics.WithSeconds(prom.NewHistogram(_metricSeconds)),\n\t\t\tmetrics.WithRequests(prom.NewCounter(_metricRequests)),\n\t\t),\n\t),\n)\n\n// http service\nhttpSrv := http.NewServer(\n\thttp.Address(":8000"),\n\thttp.Middleware(\n\t\tmetrics.Server(\n\t\t\tmetrics.WithSeconds(prom.NewHistogram(_metricSeconds)),\n\t\t\tmetrics.WithRequests(prom.NewCounter(_metricRequests)),\n\t\t),\n\t),\n)\nhttpSrv.Handle("/metrics", promhttp.Handler())\n'})}),"\n",(0,s.jsx)(t.h4,{id:"to-configure-metrics-in-clients",children:"To configure metrics in clients"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-go",children:'// grpc client\nconn, err := grpc.DialInsecure(\n\tcontext.Background(),\n\tgrpc.WithEndpoint("127.0.0.1:9000"),\n\tgrpc.WithMiddleware(\n\t\tmetrics.Client(\n\t\t\tmetrics.WithSeconds(prom.NewHistogram(_metricSeconds)),\n\t\t\tmetrics.WithRequests(prom.NewCounter(_metricRequests)),\n\t\t),\n\t),\n)\n\n// http client\nconn, err := http.NewClient(\n\tcontext.Background(),\n\thttp.WithEndpoint("127.0.0.1:8000"),\n\thttp.WithMiddleware(\n\t\tmetrics.Client(\n\t\t\tmetrics.WithSeconds(prom.NewHistogram(_metricSeconds)),\n\t\t\tmetrics.WithRequests(prom.NewCounter(_metricRequests)),\n\t\t),\n\t),\n)\n'})}),"\n",(0,s.jsx)(t.h3,{id:"usage-kratos--280-1",children:"Usage (kratos >= 2.8.0)"}),"\n",(0,s.jsxs)(t.p,{children:["Since version ",(0,s.jsx)(t.a,{href:"https://github.com/go-kratos/kratos/releases/tag/v2.8.0",children:"v2.8.0"}),", kratos uses otel.Metrics. Way to export metrics to prometheus is as follows:"]}),"\n",(0,s.jsx)(t.h4,{id:"prometheus-1",children:"Prometheus"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-go",children:'import (\n\t"github.com/go-kratos/kratos/v2/middleware/metrics"\n\t"go.opentelemetry.io/otel/exporters/prometheus"\n\t"go.opentelemetry.io/otel/metric"\n\tsdkmetric "go.opentelemetry.io/otel/sdk/metric"\n)\n\n// Detailed reference https://github.com/go-kratos/examples/tree/main/metrics\nfunc init() {\n\texporter, err := prometheus.New()\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\tprovider := sdkmetric.NewMeterProvider(sdkmetric.WithReader(exporter))\n\tmeter := provider.Meter(Name)\n\n\t_metricRequests, err = metrics.DefaultRequestsCounter(meter, metrics.DefaultServerRequestsCounterName)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n\n\t_metricSeconds, err = metrics.DefaultSecondsHistogram(meter, metrics.DefaultServerSecondsHistogramName)\n\tif err != nil {\n\t\tpanic(err)\n\t}\n}\n'})}),"\n",(0,s.jsx)(t.h4,{id:"to-configure-metrics-in-servers-1",children:"To configure metrics in servers"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-go",children:'import (\n\t"github.com/prometheus/client_golang/prometheus/promhttp"\n)\n\n// grpc service\ngrpcSrv := grpc.NewServer(\n\tgrpc.Address(":9000"),\n\tgrpc.Middleware(\n\t\tmetrics.Server(\n\t\t\tmetrics.WithSeconds(_metricSeconds),\n\t\t\tmetrics.WithRequests(_metricRequests),\n\t\t),\n\t),\n)\n\n// http service\nhttpSrv := http.NewServer(\n\thttp.Address(":8000"),\n\thttp.Middleware(\n\t\tmetrics.Server(\n\t\t\tmetrics.WithSeconds(_metricSeconds),\n\t\t\tmetrics.WithRequests(_metricRequests),\n\t\t),\n\t),\n)\nhttpSrv.Handle("/metrics", promhttp.Handler())\n'})}),"\n",(0,s.jsx)(t.h4,{id:"to-configure-metrics-in-clients-1",children:"To configure metrics in clients"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-go",children:'// grpc client\nconn, err := grpc.DialInsecure(\n\tcontext.Background(),\n\tgrpc.WithEndpoint("127.0.0.1:9000"),\n\tgrpc.WithMiddleware(\n\t\tmetrics.Client(\n\t\t\tmetrics.WithSeconds(_metricSeconds),\n\t\t\tmetrics.WithRequests(_metricRequests),\n\t\t),\n\t),\n)\n\n// http client\nconn, err := http.NewClient(\n\tcontext.Background(),\n\thttp.WithEndpoint("127.0.0.1:8000"),\n\thttp.WithMiddleware(\n\t\tmetrics.Client(\n\t\t\tmetrics.WithSeconds(_metricSeconds),\n\t\t\tmetrics.WithRequests(_metricRequests),\n\t\t),\n\t),\n)\n'})}),"\n",(0,s.jsx)(t.h3,{id:"references",children:"References"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://prometheus.io/docs/concepts/metric_types/",children:"https://prometheus.io/docs/concepts/metric_types/"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://github.com/go-kratos/examples/tree/main/metrics",children:"https://github.com/go-kratos/examples/tree/main/metrics"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"https://pkg.go.dev/go.opentelemetry.io/otel/exporters/prometheus",children:"https://pkg.go.dev/go.opentelemetry.io/otel/exporters/prometheus"})}),"\n"]})]})}function a(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>o,x:()=>c});var n=r(6540);const s={},i=n.createContext(s);function o(e){const t=n.useContext(i);return n.useMemo(function(){return"function"==typeof e?e(t):{...t,...e}},[t,e])}function c(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),n.createElement(i.Provider,{value:t},e.children)}}}]);